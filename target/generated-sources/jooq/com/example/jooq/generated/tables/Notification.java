/*
 * This file is generated by jOOQ.
 */
package com.example.jooq.generated.tables;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function6;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import com.example.jooq.generated.Keys;
import com.example.jooq.generated.Sion;
import com.example.jooq.generated.tables.records.NotificationRecord;

/** This class is generated by jOOQ. */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class Notification extends TableImpl<NotificationRecord> {

  private static final long serialVersionUID = 1L;

  /** The reference instance of <code>SION.notification</code> */
  public static final Notification NOTIFICATION = new Notification();

  /** The class holding records for this type */
  @Override
  public Class<NotificationRecord> getRecordType() {
    return NotificationRecord.class;
  }

  /** The column <code>SION.notification.notification_id</code>. */
  public final TableField<NotificationRecord, Long> NOTIFICATION_ID =
      createField(DSL.name("notification_id"), SQLDataType.BIGINT.nullable(false), this, "");

  /** The column <code>SION.notification.notification_type</code>. */
  public final TableField<NotificationRecord, String> NOTIFICATION_TYPE =
      createField(DSL.name("notification_type"), SQLDataType.VARCHAR(50).nullable(false), this, "");

  /** The column <code>SION.notification.message</code>. */
  public final TableField<NotificationRecord, String> MESSAGE =
      createField(DSL.name("message"), SQLDataType.CLOB.nullable(false), this, "");

  /** The column <code>SION.notification.is_read</code>. */
  public final TableField<NotificationRecord, Byte> IS_READ =
      createField(
          DSL.name("is_read"),
          SQLDataType.TINYINT
              .nullable(false)
              .defaultValue(DSL.field(DSL.raw("0"), SQLDataType.TINYINT)),
          this,
          "");

  /** The column <code>SION.notification.created_at</code>. */
  public final TableField<NotificationRecord, LocalDateTime> CREATED_AT =
      createField(
          DSL.name("created_at"),
          SQLDataType.LOCALDATETIME(0)
              .nullable(false)
              .defaultValue(DSL.field(DSL.raw("current_timestamp()"), SQLDataType.LOCALDATETIME)),
          this,
          "");

  /** The column <code>SION.notification.receiver_id</code>. */
  public final TableField<NotificationRecord, String> RECEIVER_ID =
      createField(DSL.name("receiver_id"), SQLDataType.VARCHAR(30).nullable(false), this, "");

  private Notification(Name alias, Table<NotificationRecord> aliased) {
    this(alias, aliased, null);
  }

  private Notification(Name alias, Table<NotificationRecord> aliased, Field<?>[] parameters) {
    super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
  }

  /** Create an aliased <code>SION.notification</code> table reference */
  public Notification(String alias) {
    this(DSL.name(alias), NOTIFICATION);
  }

  /** Create an aliased <code>SION.notification</code> table reference */
  public Notification(Name alias) {
    this(alias, NOTIFICATION);
  }

  /** Create a <code>SION.notification</code> table reference */
  public Notification() {
    this(DSL.name("notification"), null);
  }

  public <O extends Record> Notification(Table<O> child, ForeignKey<O, NotificationRecord> key) {
    super(child, key, NOTIFICATION);
  }

  @Override
  public Schema getSchema() {
    return aliased() ? null : Sion.SION;
  }

  @Override
  public UniqueKey<NotificationRecord> getPrimaryKey() {
    return Keys.KEY_NOTIFICATION_PRIMARY;
  }

  @Override
  public List<ForeignKey<NotificationRecord, ?>> getReferences() {
    return Arrays.asList(Keys.FK_NOTIFICATION_MEMBER);
  }

  private transient Member _member;

  /** Get the implicit join path to the <code>SION.member</code> table. */
  public Member member() {
    if (_member == null) _member = new Member(this, Keys.FK_NOTIFICATION_MEMBER);

    return _member;
  }

  @Override
  public Notification as(String alias) {
    return new Notification(DSL.name(alias), this);
  }

  @Override
  public Notification as(Name alias) {
    return new Notification(alias, this);
  }

  @Override
  public Notification as(Table<?> alias) {
    return new Notification(alias.getQualifiedName(), this);
  }

  /** Rename this table */
  @Override
  public Notification rename(String name) {
    return new Notification(DSL.name(name), null);
  }

  /** Rename this table */
  @Override
  public Notification rename(Name name) {
    return new Notification(name, null);
  }

  /** Rename this table */
  @Override
  public Notification rename(Table<?> name) {
    return new Notification(name.getQualifiedName(), null);
  }

  // -------------------------------------------------------------------------
  // Row6 type methods
  // -------------------------------------------------------------------------

  @Override
  public Row6<Long, String, String, Byte, LocalDateTime, String> fieldsRow() {
    return (Row6) super.fieldsRow();
  }

  /** Convenience mapping calling {@link SelectField#convertFrom(Function)}. */
  public <U> SelectField<U> mapping(
      Function6<
              ? super Long,
              ? super String,
              ? super String,
              ? super Byte,
              ? super LocalDateTime,
              ? super String,
              ? extends U>
          from) {
    return convertFrom(Records.mapping(from));
  }

  /** Convenience mapping calling {@link SelectField#convertFrom(Class, Function)}. */
  public <U> SelectField<U> mapping(
      Class<U> toType,
      Function6<
              ? super Long,
              ? super String,
              ? super String,
              ? super Byte,
              ? super LocalDateTime,
              ? super String,
              ? extends U>
          from) {
    return convertFrom(toType, Records.mapping(from));
  }
}
