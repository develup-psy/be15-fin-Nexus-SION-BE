/*
 * This file is generated by jOOQ.
 */
package com.example.jooq.generated.tables.records;


import com.example.jooq.generated.tables.Department;

import java.time.LocalDateTime;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DepartmentRecord extends UpdatableRecordImpl<DepartmentRecord> implements Record3<String, LocalDateTime, LocalDateTime> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>sion.department.department_name</code>.
     */
    public void setDepartmentName(String value) {
        set(0, value);
    }

    /**
     * Getter for <code>sion.department.department_name</code>.
     */
    public String getDepartmentName() {
        return (String) get(0);
    }

    /**
     * Setter for <code>sion.department.create_at</code>.
     */
    public void setCreateAt(LocalDateTime value) {
        set(1, value);
    }

    /**
     * Getter for <code>sion.department.create_at</code>.
     */
    public LocalDateTime getCreateAt() {
        return (LocalDateTime) get(1);
    }

    /**
     * Setter for <code>sion.department.updated_at</code>.
     */
    public void setUpdatedAt(LocalDateTime value) {
        set(2, value);
    }

    /**
     * Getter for <code>sion.department.updated_at</code>.
     */
    public LocalDateTime getUpdatedAt() {
        return (LocalDateTime) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<String> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<String, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<String, LocalDateTime, LocalDateTime> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return Department.DEPARTMENT.DEPARTMENT_NAME;
    }

    @Override
    public Field<LocalDateTime> field2() {
        return Department.DEPARTMENT.CREATE_AT;
    }

    @Override
    public Field<LocalDateTime> field3() {
        return Department.DEPARTMENT.UPDATED_AT;
    }

    @Override
    public String component1() {
        return getDepartmentName();
    }

    @Override
    public LocalDateTime component2() {
        return getCreateAt();
    }

    @Override
    public LocalDateTime component3() {
        return getUpdatedAt();
    }

    @Override
    public String value1() {
        return getDepartmentName();
    }

    @Override
    public LocalDateTime value2() {
        return getCreateAt();
    }

    @Override
    public LocalDateTime value3() {
        return getUpdatedAt();
    }

    @Override
    public DepartmentRecord value1(String value) {
        setDepartmentName(value);
        return this;
    }

    @Override
    public DepartmentRecord value2(LocalDateTime value) {
        setCreateAt(value);
        return this;
    }

    @Override
    public DepartmentRecord value3(LocalDateTime value) {
        setUpdatedAt(value);
        return this;
    }

    @Override
    public DepartmentRecord values(String value1, LocalDateTime value2, LocalDateTime value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached DepartmentRecord
     */
    public DepartmentRecord() {
        super(Department.DEPARTMENT);
    }

    /**
     * Create a detached, initialised DepartmentRecord
     */
    public DepartmentRecord(String departmentName, LocalDateTime createAt, LocalDateTime updatedAt) {
        super(Department.DEPARTMENT);

        setDepartmentName(departmentName);
        setCreateAt(createAt);
        setUpdatedAt(updatedAt);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised DepartmentRecord
     */
    public DepartmentRecord(com.example.jooq.generated.tables.pojos.Department value) {
        super(Department.DEPARTMENT);

        if (value != null) {
            setDepartmentName(value.getDepartmentName());
            setCreateAt(value.getCreateAt());
            setUpdatedAt(value.getUpdatedAt());
            resetChangedOnNotNull();
        }
    }
}
