/*
 * This file is generated by jOOQ.
 */
package com.example.jooq.generated.tables;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function8;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import com.example.jooq.generated.Keys;
import com.example.jooq.generated.Sion;
import com.example.jooq.generated.tables.records.ProjectFpSummaryRecord;

/** This class is generated by jOOQ. */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class ProjectFpSummary extends TableImpl<ProjectFpSummaryRecord> {

  private static final long serialVersionUID = 1L;

  /** The reference instance of <code>SION.project_fp_summary</code> */
  public static final ProjectFpSummary PROJECT_FP_SUMMARY = new ProjectFpSummary();

  /** The class holding records for this type */
  @Override
  public Class<ProjectFpSummaryRecord> getRecordType() {
    return ProjectFpSummaryRecord.class;
  }

  /** The column <code>SION.project_fp_summary.project_fp_summary_id</code>. */
  public final TableField<ProjectFpSummaryRecord, Long> PROJECT_FP_SUMMARY_ID =
      createField(
          DSL.name("project_fp_summary_id"),
          SQLDataType.BIGINT.nullable(false).identity(true),
          this,
          "");

  /** The column <code>SION.project_fp_summary.total_fp</code>. */
  public final TableField<ProjectFpSummaryRecord, Integer> TOTAL_FP =
      createField(DSL.name("total_fp"), SQLDataType.INTEGER.nullable(false), this, "");

  /** The column <code>SION.project_fp_summary.avg_effort_per_fp</code>. */
  public final TableField<ProjectFpSummaryRecord, Integer> AVG_EFFORT_PER_FP =
      createField(DSL.name("avg_effort_per_fp"), SQLDataType.INTEGER.nullable(false), this, "");

  /** The column <code>SION.project_fp_summary.total_effort</code>. */
  public final TableField<ProjectFpSummaryRecord, BigDecimal> TOTAL_EFFORT =
      createField(
          DSL.name("total_effort"),
          SQLDataType.DECIMAL(6, 2).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.DECIMAL)),
          this,
          "");

  /** The column <code>SION.project_fp_summary.estimated_duration</code>. */
  public final TableField<ProjectFpSummaryRecord, BigDecimal> ESTIMATED_DURATION =
      createField(
          DSL.name("estimated_duration"),
          SQLDataType.DECIMAL(5, 2).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.DECIMAL)),
          this,
          "");

  /** The column <code>SION.project_fp_summary.estimated_cost</code>. */
  public final TableField<ProjectFpSummaryRecord, BigDecimal> ESTIMATED_COST =
      createField(
          DSL.name("estimated_cost"),
          SQLDataType.DECIMAL(12, 2).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.DECIMAL)),
          this,
          "");

  /** The column <code>SION.project_fp_summary.created_at</code>. */
  public final TableField<ProjectFpSummaryRecord, LocalDateTime> CREATED_AT =
      createField(
          DSL.name("created_at"),
          SQLDataType.LOCALDATETIME(0)
              .nullable(false)
              .defaultValue(DSL.field(DSL.raw("current_timestamp()"), SQLDataType.LOCALDATETIME)),
          this,
          "");

  /** The column <code>SION.project_fp_summary.project_code</code>. */
  public final TableField<ProjectFpSummaryRecord, String> PROJECT_CODE =
      createField(DSL.name("project_code"), SQLDataType.VARCHAR(30).nullable(false), this, "");

  private ProjectFpSummary(Name alias, Table<ProjectFpSummaryRecord> aliased) {
    this(alias, aliased, null);
  }

  private ProjectFpSummary(
      Name alias, Table<ProjectFpSummaryRecord> aliased, Field<?>[] parameters) {
    super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
  }

  /** Create an aliased <code>SION.project_fp_summary</code> table reference */
  public ProjectFpSummary(String alias) {
    this(DSL.name(alias), PROJECT_FP_SUMMARY);
  }

  /** Create an aliased <code>SION.project_fp_summary</code> table reference */
  public ProjectFpSummary(Name alias) {
    this(alias, PROJECT_FP_SUMMARY);
  }

  /** Create a <code>SION.project_fp_summary</code> table reference */
  public ProjectFpSummary() {
    this(DSL.name("project_fp_summary"), null);
  }

  public <O extends Record> ProjectFpSummary(
      Table<O> child, ForeignKey<O, ProjectFpSummaryRecord> key) {
    super(child, key, PROJECT_FP_SUMMARY);
  }

  @Override
  public Schema getSchema() {
    return aliased() ? null : Sion.SION;
  }

  @Override
  public Identity<ProjectFpSummaryRecord, Long> getIdentity() {
    return (Identity<ProjectFpSummaryRecord, Long>) super.getIdentity();
  }

  @Override
  public UniqueKey<ProjectFpSummaryRecord> getPrimaryKey() {
    return Keys.KEY_PROJECT_FP_SUMMARY_PRIMARY;
  }

  @Override
  public List<ForeignKey<ProjectFpSummaryRecord, ?>> getReferences() {
    return Arrays.asList(Keys.FK_PROJECT_TO_PROJECT_FP_SUMMARY_1);
  }

  private transient Project _project;

  /** Get the implicit join path to the <code>SION.project</code> table. */
  public Project project() {
    if (_project == null) _project = new Project(this, Keys.FK_PROJECT_TO_PROJECT_FP_SUMMARY_1);

    return _project;
  }

  @Override
  public ProjectFpSummary as(String alias) {
    return new ProjectFpSummary(DSL.name(alias), this);
  }

  @Override
  public ProjectFpSummary as(Name alias) {
    return new ProjectFpSummary(alias, this);
  }

  @Override
  public ProjectFpSummary as(Table<?> alias) {
    return new ProjectFpSummary(alias.getQualifiedName(), this);
  }

  /** Rename this table */
  @Override
  public ProjectFpSummary rename(String name) {
    return new ProjectFpSummary(DSL.name(name), null);
  }

  /** Rename this table */
  @Override
  public ProjectFpSummary rename(Name name) {
    return new ProjectFpSummary(name, null);
  }

  /** Rename this table */
  @Override
  public ProjectFpSummary rename(Table<?> name) {
    return new ProjectFpSummary(name.getQualifiedName(), null);
  }

  // -------------------------------------------------------------------------
  // Row8 type methods
  // -------------------------------------------------------------------------

  @Override
  public Row8<Long, Integer, Integer, BigDecimal, BigDecimal, BigDecimal, LocalDateTime, String>
      fieldsRow() {
    return (Row8) super.fieldsRow();
  }

  /** Convenience mapping calling {@link SelectField#convertFrom(Function)}. */
  public <U> SelectField<U> mapping(
      Function8<
              ? super Long,
              ? super Integer,
              ? super Integer,
              ? super BigDecimal,
              ? super BigDecimal,
              ? super BigDecimal,
              ? super LocalDateTime,
              ? super String,
              ? extends U>
          from) {
    return convertFrom(Records.mapping(from));
  }

  /** Convenience mapping calling {@link SelectField#convertFrom(Class, Function)}. */
  public <U> SelectField<U> mapping(
      Class<U> toType,
      Function8<
              ? super Long,
              ? super Integer,
              ? super Integer,
              ? super BigDecimal,
              ? super BigDecimal,
              ? super BigDecimal,
              ? super LocalDateTime,
              ? super String,
              ? extends U>
          from) {
    return convertFrom(toType, Records.mapping(from));
  }
}
