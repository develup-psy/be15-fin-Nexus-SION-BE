/*
 * This file is generated by jOOQ.
 */
package com.example.jooq.generated.tables;


import com.example.jooq.generated.Keys;
import com.example.jooq.generated.Sion;
import com.example.jooq.generated.tables.records.JobAndTechStackRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function6;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JobAndTechStack extends TableImpl<JobAndTechStackRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>sion.job_and_tech_stack</code>
     */
    public static final JobAndTechStack JOB_AND_TECH_STACK = new JobAndTechStack();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JobAndTechStackRecord> getRecordType() {
        return JobAndTechStackRecord.class;
    }

    /**
     * The column <code>sion.job_and_tech_stack.job_and_tech_stack_id</code>.
     */
    public final TableField<JobAndTechStackRecord, Long> JOB_AND_TECH_STACK_ID = createField(DSL.name("job_and_tech_stack_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>sion.job_and_tech_stack.tech_stack_name</code>.
     */
    public final TableField<JobAndTechStackRecord, String> TECH_STACK_NAME = createField(DSL.name("tech_stack_name"), SQLDataType.VARCHAR(30).nullable(false), this, "");

    /**
     * The column <code>sion.job_and_tech_stack.project_and_job_id</code>.
     */
    public final TableField<JobAndTechStackRecord, Long> PROJECT_AND_JOB_ID = createField(DSL.name("project_and_job_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>sion.job_and_tech_stack.priority</code>.
     */
    public final TableField<JobAndTechStackRecord, Integer> PRIORITY = createField(DSL.name("priority"), SQLDataType.INTEGER.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>sion.job_and_tech_stack.created_at</code>.
     */
    public final TableField<JobAndTechStackRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("current_timestamp()"), SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>sion.job_and_tech_stack.updated_at</code>.
     */
    public final TableField<JobAndTechStackRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("current_timestamp()"), SQLDataType.LOCALDATETIME)), this, "");

    private JobAndTechStack(Name alias, Table<JobAndTechStackRecord> aliased) {
        this(alias, aliased, null);
    }

    private JobAndTechStack(Name alias, Table<JobAndTechStackRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>sion.job_and_tech_stack</code> table reference
     */
    public JobAndTechStack(String alias) {
        this(DSL.name(alias), JOB_AND_TECH_STACK);
    }

    /**
     * Create an aliased <code>sion.job_and_tech_stack</code> table reference
     */
    public JobAndTechStack(Name alias) {
        this(alias, JOB_AND_TECH_STACK);
    }

    /**
     * Create a <code>sion.job_and_tech_stack</code> table reference
     */
    public JobAndTechStack() {
        this(DSL.name("job_and_tech_stack"), null);
    }

    public <O extends Record> JobAndTechStack(Table<O> child, ForeignKey<O, JobAndTechStackRecord> key) {
        super(child, key, JOB_AND_TECH_STACK);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Sion.SION;
    }

    @Override
    public UniqueKey<JobAndTechStackRecord> getPrimaryKey() {
        return Keys.KEY_JOB_AND_TECH_STACK_PRIMARY;
    }

    @Override
    public List<ForeignKey<JobAndTechStackRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK_TECH_STACK_TO_JOB_AND_TECH_STACK_1, Keys.FK_PROJECT_AND_JOB_TO_JOB_AND_TECH_STACK_1);
    }

    private transient TechStack _techStack;
    private transient ProjectAndJob _projectAndJob;

    /**
     * Get the implicit join path to the <code>sion.tech_stack</code> table.
     */
    public TechStack techStack() {
        if (_techStack == null)
            _techStack = new TechStack(this, Keys.FK_TECH_STACK_TO_JOB_AND_TECH_STACK_1);

        return _techStack;
    }

    /**
     * Get the implicit join path to the <code>sion.project_and_job</code>
     * table.
     */
    public ProjectAndJob projectAndJob() {
        if (_projectAndJob == null)
            _projectAndJob = new ProjectAndJob(this, Keys.FK_PROJECT_AND_JOB_TO_JOB_AND_TECH_STACK_1);

        return _projectAndJob;
    }

    @Override
    public JobAndTechStack as(String alias) {
        return new JobAndTechStack(DSL.name(alias), this);
    }

    @Override
    public JobAndTechStack as(Name alias) {
        return new JobAndTechStack(alias, this);
    }

    @Override
    public JobAndTechStack as(Table<?> alias) {
        return new JobAndTechStack(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public JobAndTechStack rename(String name) {
        return new JobAndTechStack(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JobAndTechStack rename(Name name) {
        return new JobAndTechStack(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public JobAndTechStack rename(Table<?> name) {
        return new JobAndTechStack(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Long, String, Long, Integer, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row6) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function6<? super Long, ? super String, ? super Long, ? super Integer, ? super LocalDateTime, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function6<? super Long, ? super String, ? super Long, ? super Integer, ? super LocalDateTime, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
