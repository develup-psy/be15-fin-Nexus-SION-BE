/*
 * This file is generated by jOOQ.
 */
package com.example.jooq.generated.tables.records;


import com.example.jooq.generated.tables.InitialScore;

import java.time.LocalDateTime;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record5;
import org.jooq.Row5;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class InitialScoreRecord extends UpdatableRecordImpl<InitialScoreRecord> implements Record5<Long, Integer, Integer, LocalDateTime, LocalDateTime> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>sion.initial_score.id</code>.
     */
    public void setId(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>sion.initial_score.id</code>.
     */
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>sion.initial_score.years</code>.
     */
    public void setYears(Integer value) {
        set(1, value);
    }

    /**
     * Getter for <code>sion.initial_score.years</code>.
     */
    public Integer getYears() {
        return (Integer) get(1);
    }

    /**
     * Setter for <code>sion.initial_score.score</code>.
     */
    public void setScore(Integer value) {
        set(2, value);
    }

    /**
     * Getter for <code>sion.initial_score.score</code>.
     */
    public Integer getScore() {
        return (Integer) get(2);
    }

    /**
     * Setter for <code>sion.initial_score.created_at</code>.
     */
    public void setCreatedAt(LocalDateTime value) {
        set(3, value);
    }

    /**
     * Getter for <code>sion.initial_score.created_at</code>.
     */
    public LocalDateTime getCreatedAt() {
        return (LocalDateTime) get(3);
    }

    /**
     * Setter for <code>sion.initial_score.updated_at</code>.
     */
    public void setUpdatedAt(LocalDateTime value) {
        set(4, value);
    }

    /**
     * Getter for <code>sion.initial_score.updated_at</code>.
     */
    public LocalDateTime getUpdatedAt() {
        return (LocalDateTime) get(4);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record5 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row5<Long, Integer, Integer, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    @Override
    public Row5<Long, Integer, Integer, LocalDateTime, LocalDateTime> valuesRow() {
        return (Row5) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return InitialScore.INITIAL_SCORE.ID;
    }

    @Override
    public Field<Integer> field2() {
        return InitialScore.INITIAL_SCORE.YEARS;
    }

    @Override
    public Field<Integer> field3() {
        return InitialScore.INITIAL_SCORE.SCORE;
    }

    @Override
    public Field<LocalDateTime> field4() {
        return InitialScore.INITIAL_SCORE.CREATED_AT;
    }

    @Override
    public Field<LocalDateTime> field5() {
        return InitialScore.INITIAL_SCORE.UPDATED_AT;
    }

    @Override
    public Long component1() {
        return getId();
    }

    @Override
    public Integer component2() {
        return getYears();
    }

    @Override
    public Integer component3() {
        return getScore();
    }

    @Override
    public LocalDateTime component4() {
        return getCreatedAt();
    }

    @Override
    public LocalDateTime component5() {
        return getUpdatedAt();
    }

    @Override
    public Long value1() {
        return getId();
    }

    @Override
    public Integer value2() {
        return getYears();
    }

    @Override
    public Integer value3() {
        return getScore();
    }

    @Override
    public LocalDateTime value4() {
        return getCreatedAt();
    }

    @Override
    public LocalDateTime value5() {
        return getUpdatedAt();
    }

    @Override
    public InitialScoreRecord value1(Long value) {
        setId(value);
        return this;
    }

    @Override
    public InitialScoreRecord value2(Integer value) {
        setYears(value);
        return this;
    }

    @Override
    public InitialScoreRecord value3(Integer value) {
        setScore(value);
        return this;
    }

    @Override
    public InitialScoreRecord value4(LocalDateTime value) {
        setCreatedAt(value);
        return this;
    }

    @Override
    public InitialScoreRecord value5(LocalDateTime value) {
        setUpdatedAt(value);
        return this;
    }

    @Override
    public InitialScoreRecord values(Long value1, Integer value2, Integer value3, LocalDateTime value4, LocalDateTime value5) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached InitialScoreRecord
     */
    public InitialScoreRecord() {
        super(InitialScore.INITIAL_SCORE);
    }

    /**
     * Create a detached, initialised InitialScoreRecord
     */
    public InitialScoreRecord(Long id, Integer years, Integer score, LocalDateTime createdAt, LocalDateTime updatedAt) {
        super(InitialScore.INITIAL_SCORE);

        setId(id);
        setYears(years);
        setScore(score);
        setCreatedAt(createdAt);
        setUpdatedAt(updatedAt);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised InitialScoreRecord
     */
    public InitialScoreRecord(com.example.jooq.generated.tables.pojos.InitialScore value) {
        super(InitialScore.INITIAL_SCORE);

        if (value != null) {
            setId(value.getId());
            setYears(value.getYears());
            setScore(value.getScore());
            setCreatedAt(value.getCreatedAt());
            setUpdatedAt(value.getUpdatedAt());
            resetChangedOnNotNull();
        }
    }
}
