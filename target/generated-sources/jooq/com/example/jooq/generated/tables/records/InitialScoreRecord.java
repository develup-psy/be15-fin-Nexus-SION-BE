/*
 * This file is generated by jOOQ.
 */
package com.example.jooq.generated.tables.records;

import java.time.LocalDateTime;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record6;
import org.jooq.Row6;
import org.jooq.impl.UpdatableRecordImpl;

import com.example.jooq.generated.tables.InitialScore;

/** This class is generated by jOOQ. */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class InitialScoreRecord extends UpdatableRecordImpl<InitialScoreRecord>
    implements Record6<Long, Integer, Integer, Integer, LocalDateTime, LocalDateTime> {

  private static final long serialVersionUID = 1L;

  /** Setter for <code>sion.initial_score.id</code>. */
  public void setId(Long value) {
    set(0, value);
  }

  /** Getter for <code>sion.initial_score.id</code>. */
  public Long getId() {
    return (Long) get(0);
  }

  /** Setter for <code>sion.initial_score.min_years</code>. */
  public void setMinYears(Integer value) {
    set(1, value);
  }

  /** Getter for <code>sion.initial_score.min_years</code>. */
  public Integer getMinYears() {
    return (Integer) get(1);
  }

  /** Setter for <code>sion.initial_score.max_years</code>. */
  public void setMaxYears(Integer value) {
    set(2, value);
  }

  /** Getter for <code>sion.initial_score.max_years</code>. */
  public Integer getMaxYears() {
    return (Integer) get(2);
  }

  /** Setter for <code>sion.initial_score.score</code>. */
  public void setScore(Integer value) {
    set(3, value);
  }

  /** Getter for <code>sion.initial_score.score</code>. */
  public Integer getScore() {
    return (Integer) get(3);
  }

  /** Setter for <code>sion.initial_score.created_at</code>. */
  public void setCreatedAt(LocalDateTime value) {
    set(4, value);
  }

  /** Getter for <code>sion.initial_score.created_at</code>. */
  public LocalDateTime getCreatedAt() {
    return (LocalDateTime) get(4);
  }

  /** Setter for <code>sion.initial_score.updated_at</code>. */
  public void setUpdatedAt(LocalDateTime value) {
    set(5, value);
  }

  /** Getter for <code>sion.initial_score.updated_at</code>. */
  public LocalDateTime getUpdatedAt() {
    return (LocalDateTime) get(5);
  }

  // -------------------------------------------------------------------------
  // Primary key information
  // -------------------------------------------------------------------------

  @Override
  public Record1<Long> key() {
    return (Record1) super.key();
  }

  // -------------------------------------------------------------------------
  // Record6 type implementation
  // -------------------------------------------------------------------------

  @Override
  public Row6<Long, Integer, Integer, Integer, LocalDateTime, LocalDateTime> fieldsRow() {
    return (Row6) super.fieldsRow();
  }

  @Override
  public Row6<Long, Integer, Integer, Integer, LocalDateTime, LocalDateTime> valuesRow() {
    return (Row6) super.valuesRow();
  }

  @Override
  public Field<Long> field1() {
    return InitialScore.INITIAL_SCORE.ID;
  }

  @Override
  public Field<Integer> field2() {
    return InitialScore.INITIAL_SCORE.MIN_YEARS;
  }

  @Override
  public Field<Integer> field3() {
    return InitialScore.INITIAL_SCORE.MAX_YEARS;
  }

  @Override
  public Field<Integer> field4() {
    return InitialScore.INITIAL_SCORE.SCORE;
  }

  @Override
  public Field<LocalDateTime> field5() {
    return InitialScore.INITIAL_SCORE.CREATED_AT;
  }

  @Override
  public Field<LocalDateTime> field6() {
    return InitialScore.INITIAL_SCORE.UPDATED_AT;
  }

  @Override
  public Long component1() {
    return getId();
  }

  @Override
  public Integer component2() {
    return getMinYears();
  }

  @Override
  public Integer component3() {
    return getMaxYears();
  }

  @Override
  public Integer component4() {
    return getScore();
  }

  @Override
  public LocalDateTime component5() {
    return getCreatedAt();
  }

  @Override
  public LocalDateTime component6() {
    return getUpdatedAt();
  }

  @Override
  public Long value1() {
    return getId();
  }

  @Override
  public Integer value2() {
    return getMinYears();
  }

  @Override
  public Integer value3() {
    return getMaxYears();
  }

  @Override
  public Integer value4() {
    return getScore();
  }

  @Override
  public LocalDateTime value5() {
    return getCreatedAt();
  }

  @Override
  public LocalDateTime value6() {
    return getUpdatedAt();
  }

  @Override
  public InitialScoreRecord value1(Long value) {
    setId(value);
    return this;
  }

  @Override
  public InitialScoreRecord value2(Integer value) {
    setMinYears(value);
    return this;
  }

  @Override
  public InitialScoreRecord value3(Integer value) {
    setMaxYears(value);
    return this;
  }

  @Override
  public InitialScoreRecord value4(Integer value) {
    setScore(value);
    return this;
  }

  @Override
  public InitialScoreRecord value5(LocalDateTime value) {
    setCreatedAt(value);
    return this;
  }

  @Override
  public InitialScoreRecord value6(LocalDateTime value) {
    setUpdatedAt(value);
    return this;
  }

  @Override
  public InitialScoreRecord values(
      Long value1,
      Integer value2,
      Integer value3,
      Integer value4,
      LocalDateTime value5,
      LocalDateTime value6) {
    value1(value1);
    value2(value2);
    value3(value3);
    value4(value4);
    value5(value5);
    value6(value6);
    return this;
  }

  // -------------------------------------------------------------------------
  // Constructors
  // -------------------------------------------------------------------------

  /** Create a detached InitialScoreRecord */
  public InitialScoreRecord() {
    super(InitialScore.INITIAL_SCORE);
  }

  /** Create a detached, initialised InitialScoreRecord */
  public InitialScoreRecord(
      Long id,
      Integer minYears,
      Integer maxYears,
      Integer score,
      LocalDateTime createdAt,
      LocalDateTime updatedAt) {
    super(InitialScore.INITIAL_SCORE);

    setId(id);
    setMinYears(minYears);
    setMaxYears(maxYears);
    setScore(score);
    setCreatedAt(createdAt);
    setUpdatedAt(updatedAt);
    resetChangedOnNotNull();
  }

  /** Create a detached, initialised InitialScoreRecord */
  public InitialScoreRecord(com.example.jooq.generated.tables.pojos.InitialScore value) {
    super(InitialScore.INITIAL_SCORE);

    if (value != null) {
      setId(value.getId());
      setMinYears(value.getMinYears());
      setMaxYears(value.getMaxYears());
      setScore(value.getScore());
      setCreatedAt(value.getCreatedAt());
      setUpdatedAt(value.getUpdatedAt());
      resetChangedOnNotNull();
    }
  }
}
