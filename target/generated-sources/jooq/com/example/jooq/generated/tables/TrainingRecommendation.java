/*
 * This file is generated by jOOQ.
 */
package com.example.jooq.generated.tables;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function6;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import com.example.jooq.generated.Keys;
import com.example.jooq.generated.Sion;
import com.example.jooq.generated.tables.records.TrainingRecommendationRecord;

/** This class is generated by jOOQ. */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class TrainingRecommendation extends TableImpl<TrainingRecommendationRecord> {

  private static final long serialVersionUID = 1L;

  /** The reference instance of <code>sion.training_recommendation</code> */
  public static final TrainingRecommendation TRAINING_RECOMMENDATION = new TrainingRecommendation();

  /** The class holding records for this type */
  @Override
  public Class<TrainingRecommendationRecord> getRecordType() {
    return TrainingRecommendationRecord.class;
  }

  /** The column <code>sion.training_recommendation.training_recommendation_id</code>. */
  public final TableField<TrainingRecommendationRecord, Long> TRAINING_RECOMMENDATION_ID =
      createField(
          DSL.name("training_recommendation_id"),
          SQLDataType.BIGINT.nullable(false).identity(true),
          this,
          "");

  /** The column <code>sion.training_recommendation.employee_identification_number</code>. */
  public final TableField<TrainingRecommendationRecord, String> EMPLOYEE_IDENTIFICATION_NUMBER =
      createField(
          DSL.name("employee_identification_number"),
          SQLDataType.VARCHAR(30).nullable(false),
          this,
          "");

  /** The column <code>sion.training_recommendation.training_name</code>. */
  public final TableField<TrainingRecommendationRecord, String> TRAINING_NAME =
      createField(DSL.name("training_name"), SQLDataType.VARCHAR(100).nullable(false), this, "");

  /** The column <code>sion.training_recommendation.recommendation_reason</code>. */
  public final TableField<TrainingRecommendationRecord, String> RECOMMENDATION_REASON =
      createField(DSL.name("recommendation_reason"), SQLDataType.CLOB.nullable(false), this, "");

  /** The column <code>sion.training_recommendation.recommended_at</code>. */
  public final TableField<TrainingRecommendationRecord, LocalDateTime> RECOMMENDED_AT =
      createField(
          DSL.name("recommended_at"),
          SQLDataType.LOCALDATETIME(0)
              .nullable(false)
              .defaultValue(DSL.field(DSL.raw("current_timestamp()"), SQLDataType.LOCALDATETIME)),
          this,
          "");

  /** The column <code>sion.training_recommendation.is_completed</code>. */
  public final TableField<TrainingRecommendationRecord, Byte> IS_COMPLETED =
      createField(
          DSL.name("is_completed"),
          SQLDataType.TINYINT.defaultValue(DSL.field(DSL.raw("0"), SQLDataType.TINYINT)),
          this,
          "");

  private TrainingRecommendation(Name alias, Table<TrainingRecommendationRecord> aliased) {
    this(alias, aliased, null);
  }

  private TrainingRecommendation(
      Name alias, Table<TrainingRecommendationRecord> aliased, Field<?>[] parameters) {
    super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
  }

  /** Create an aliased <code>sion.training_recommendation</code> table reference */
  public TrainingRecommendation(String alias) {
    this(DSL.name(alias), TRAINING_RECOMMENDATION);
  }

  /** Create an aliased <code>sion.training_recommendation</code> table reference */
  public TrainingRecommendation(Name alias) {
    this(alias, TRAINING_RECOMMENDATION);
  }

  /** Create a <code>sion.training_recommendation</code> table reference */
  public TrainingRecommendation() {
    this(DSL.name("training_recommendation"), null);
  }

  public <O extends Record> TrainingRecommendation(
      Table<O> child, ForeignKey<O, TrainingRecommendationRecord> key) {
    super(child, key, TRAINING_RECOMMENDATION);
  }

  @Override
  public Schema getSchema() {
    return aliased() ? null : Sion.SION;
  }

  @Override
  public Identity<TrainingRecommendationRecord, Long> getIdentity() {
    return (Identity<TrainingRecommendationRecord, Long>) super.getIdentity();
  }

  @Override
  public UniqueKey<TrainingRecommendationRecord> getPrimaryKey() {
    return Keys.KEY_TRAINING_RECOMMENDATION_PRIMARY;
  }

  @Override
  public List<ForeignKey<TrainingRecommendationRecord, ?>> getReferences() {
    return Arrays.asList(Keys.FK_TR_MEMBER, Keys.FK_TR_TRAINING);
  }

  private transient Member _member;
  private transient TrainingProgram _trainingProgram;

  /** Get the implicit join path to the <code>sion.member</code> table. */
  public Member member() {
    if (_member == null) _member = new Member(this, Keys.FK_TR_MEMBER);

    return _member;
  }

  /** Get the implicit join path to the <code>sion.training_program</code> table. */
  public TrainingProgram trainingProgram() {
    if (_trainingProgram == null) _trainingProgram = new TrainingProgram(this, Keys.FK_TR_TRAINING);

    return _trainingProgram;
  }

  @Override
  public TrainingRecommendation as(String alias) {
    return new TrainingRecommendation(DSL.name(alias), this);
  }

  @Override
  public TrainingRecommendation as(Name alias) {
    return new TrainingRecommendation(alias, this);
  }

  @Override
  public TrainingRecommendation as(Table<?> alias) {
    return new TrainingRecommendation(alias.getQualifiedName(), this);
  }

  /** Rename this table */
  @Override
  public TrainingRecommendation rename(String name) {
    return new TrainingRecommendation(DSL.name(name), null);
  }

  /** Rename this table */
  @Override
  public TrainingRecommendation rename(Name name) {
    return new TrainingRecommendation(name, null);
  }

  /** Rename this table */
  @Override
  public TrainingRecommendation rename(Table<?> name) {
    return new TrainingRecommendation(name.getQualifiedName(), null);
  }

  // -------------------------------------------------------------------------
  // Row6 type methods
  // -------------------------------------------------------------------------

  @Override
  public Row6<Long, String, String, String, LocalDateTime, Byte> fieldsRow() {
    return (Row6) super.fieldsRow();
  }

  /** Convenience mapping calling {@link SelectField#convertFrom(Function)}. */
  public <U> SelectField<U> mapping(
      Function6<
              ? super Long,
              ? super String,
              ? super String,
              ? super String,
              ? super LocalDateTime,
              ? super Byte,
              ? extends U>
          from) {
    return convertFrom(Records.mapping(from));
  }

  /** Convenience mapping calling {@link SelectField#convertFrom(Class, Function)}. */
  public <U> SelectField<U> mapping(
      Class<U> toType,
      Function6<
              ? super Long,
              ? super String,
              ? super String,
              ? super String,
              ? super LocalDateTime,
              ? super Byte,
              ? extends U>
          from) {
    return convertFrom(toType, Records.mapping(from));
  }
}
