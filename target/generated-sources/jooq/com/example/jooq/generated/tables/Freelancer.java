/*
 * This file is generated by jOOQ.
 */
package com.example.jooq.generated.tables;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function9;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import com.example.jooq.generated.Keys;
import com.example.jooq.generated.Sion;
import com.example.jooq.generated.tables.records.FreelancerRecord;

/** This class is generated by jOOQ. */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class Freelancer extends TableImpl<FreelancerRecord> {

  private static final long serialVersionUID = 1L;

  /** The reference instance of <code>SION.freelancer</code> */
  public static final Freelancer FREELANCER = new Freelancer();

  /** The class holding records for this type */
  @Override
  public Class<FreelancerRecord> getRecordType() {
    return FreelancerRecord.class;
  }

  /** The column <code>SION.freelancer.freelancer_id</code>. */
  public final TableField<FreelancerRecord, Long> FREELANCER_ID =
      createField(DSL.name("freelancer_id"), SQLDataType.BIGINT.nullable(false), this, "");

  /** The column <code>SION.freelancer.name</code>. */
  public final TableField<FreelancerRecord, String> NAME =
      createField(DSL.name("name"), SQLDataType.VARCHAR(30).nullable(false), this, "");

  /** The column <code>SION.freelancer.phone_number</code>. */
  public final TableField<FreelancerRecord, String> PHONE_NUMBER =
      createField(DSL.name("phone_number"), SQLDataType.VARCHAR(20).nullable(false), this, "");

  /** The column <code>SION.freelancer.email</code>. */
  public final TableField<FreelancerRecord, String> EMAIL =
      createField(DSL.name("email"), SQLDataType.VARCHAR(50).nullable(false), this, "");

  /** The column <code>SION.freelancer.career_years</code>. */
  public final TableField<FreelancerRecord, Integer> CAREER_YEARS =
      createField(
          DSL.name("career_years"),
          SQLDataType.INTEGER.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.INTEGER)),
          this,
          "");

  /** The column <code>SION.freelancer.resume_url</code>. */
  public final TableField<FreelancerRecord, String> RESUME_URL =
      createField(DSL.name("resume_url"), SQLDataType.VARCHAR(255).nullable(false), this, "");

  /** The column <code>SION.freelancer.created_at</code>. */
  public final TableField<FreelancerRecord, LocalDateTime> CREATED_AT =
      createField(
          DSL.name("created_at"),
          SQLDataType.LOCALDATETIME(0)
              .nullable(false)
              .defaultValue(DSL.field(DSL.raw("current_timestamp()"), SQLDataType.LOCALDATETIME)),
          this,
          "");

  /** The column <code>SION.freelancer.profile_image_url</code>. */
  public final TableField<FreelancerRecord, String> PROFILE_IMAGE_URL =
      createField(
          DSL.name("profile_image_url"),
          SQLDataType.VARCHAR(255).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.VARCHAR)),
          this,
          "");

  /** The column <code>SION.freelancer.birthday</code>. */
  public final TableField<FreelancerRecord, LocalDate> BIRTHDAY =
      createField(
          DSL.name("birthday"),
          SQLDataType.LOCALDATE.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.LOCALDATE)),
          this,
          "");

  private Freelancer(Name alias, Table<FreelancerRecord> aliased) {
    this(alias, aliased, null);
  }

  private Freelancer(Name alias, Table<FreelancerRecord> aliased, Field<?>[] parameters) {
    super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
  }

  /** Create an aliased <code>SION.freelancer</code> table reference */
  public Freelancer(String alias) {
    this(DSL.name(alias), FREELANCER);
  }

  /** Create an aliased <code>SION.freelancer</code> table reference */
  public Freelancer(Name alias) {
    this(alias, FREELANCER);
  }

  /** Create a <code>SION.freelancer</code> table reference */
  public Freelancer() {
    this(DSL.name("freelancer"), null);
  }

  public <O extends Record> Freelancer(Table<O> child, ForeignKey<O, FreelancerRecord> key) {
    super(child, key, FREELANCER);
  }

  @Override
  public Schema getSchema() {
    return aliased() ? null : Sion.SION;
  }

  @Override
  public UniqueKey<FreelancerRecord> getPrimaryKey() {
    return Keys.KEY_FREELANCER_PRIMARY;
  }

  @Override
  public Freelancer as(String alias) {
    return new Freelancer(DSL.name(alias), this);
  }

  @Override
  public Freelancer as(Name alias) {
    return new Freelancer(alias, this);
  }

  @Override
  public Freelancer as(Table<?> alias) {
    return new Freelancer(alias.getQualifiedName(), this);
  }

  /** Rename this table */
  @Override
  public Freelancer rename(String name) {
    return new Freelancer(DSL.name(name), null);
  }

  /** Rename this table */
  @Override
  public Freelancer rename(Name name) {
    return new Freelancer(name, null);
  }

  /** Rename this table */
  @Override
  public Freelancer rename(Table<?> name) {
    return new Freelancer(name.getQualifiedName(), null);
  }

  // -------------------------------------------------------------------------
  // Row9 type methods
  // -------------------------------------------------------------------------

  @Override
  public Row9<Long, String, String, String, Integer, String, LocalDateTime, String, LocalDate>
      fieldsRow() {
    return (Row9) super.fieldsRow();
  }

  /** Convenience mapping calling {@link SelectField#convertFrom(Function)}. */
  public <U> SelectField<U> mapping(
      Function9<
              ? super Long,
              ? super String,
              ? super String,
              ? super String,
              ? super Integer,
              ? super String,
              ? super LocalDateTime,
              ? super String,
              ? super LocalDate,
              ? extends U>
          from) {
    return convertFrom(Records.mapping(from));
  }

  /** Convenience mapping calling {@link SelectField#convertFrom(Class, Function)}. */
  public <U> SelectField<U> mapping(
      Class<U> toType,
      Function9<
              ? super Long,
              ? super String,
              ? super String,
              ? super String,
              ? super Integer,
              ? super String,
              ? super LocalDateTime,
              ? super String,
              ? super LocalDate,
              ? extends U>
          from) {
    return convertFrom(toType, Records.mapping(from));
  }
}
