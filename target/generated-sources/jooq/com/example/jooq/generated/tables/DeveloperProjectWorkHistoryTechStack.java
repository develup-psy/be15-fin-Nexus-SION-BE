/*
 * This file is generated by jOOQ.
 */
package com.example.jooq.generated.tables;

import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function3;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import com.example.jooq.generated.Keys;
import com.example.jooq.generated.Sion;
import com.example.jooq.generated.tables.records.DeveloperProjectWorkHistoryTechStackRecord;

/** This class is generated by jOOQ. */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class DeveloperProjectWorkHistoryTechStack
    extends TableImpl<DeveloperProjectWorkHistoryTechStackRecord> {

  private static final long serialVersionUID = 1L;

  /** The reference instance of <code>sion.developer_project_work_history_tech_stack</code> */
  public static final DeveloperProjectWorkHistoryTechStack
      DEVELOPER_PROJECT_WORK_HISTORY_TECH_STACK = new DeveloperProjectWorkHistoryTechStack();

  /** The class holding records for this type */
  @Override
  public Class<DeveloperProjectWorkHistoryTechStackRecord> getRecordType() {
    return DeveloperProjectWorkHistoryTechStackRecord.class;
  }

  /**
   * The column <code>
   * sion.developer_project_work_history_tech_stack.developer_project_work_history_tech_stack_id
   * </code>.
   */
  public final TableField<DeveloperProjectWorkHistoryTechStackRecord, Long>
      DEVELOPER_PROJECT_WORK_HISTORY_TECH_STACK_ID =
          createField(
              DSL.name("developer_project_work_history_tech_stack_id"),
              SQLDataType.BIGINT.nullable(false).identity(true),
              this,
              "");

  /**
   * The column <code>
   * sion.developer_project_work_history_tech_stack.developer_project_work_history_id</code>.
   */
  public final TableField<DeveloperProjectWorkHistoryTechStackRecord, Long>
      DEVELOPER_PROJECT_WORK_HISTORY_ID =
          createField(
              DSL.name("developer_project_work_history_id"),
              SQLDataType.BIGINT.nullable(false),
              this,
              "");

  /** The column <code>sion.developer_project_work_history_tech_stack.tech_stack_name</code>. */
  public final TableField<DeveloperProjectWorkHistoryTechStackRecord, String> TECH_STACK_NAME =
      createField(DSL.name("tech_stack_name"), SQLDataType.VARCHAR(30).nullable(false), this, "");

  private DeveloperProjectWorkHistoryTechStack(
      Name alias, Table<DeveloperProjectWorkHistoryTechStackRecord> aliased) {
    this(alias, aliased, null);
  }

  private DeveloperProjectWorkHistoryTechStack(
      Name alias,
      Table<DeveloperProjectWorkHistoryTechStackRecord> aliased,
      Field<?>[] parameters) {
    super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
  }

  /**
   * Create an aliased <code>sion.developer_project_work_history_tech_stack</code> table reference
   */
  public DeveloperProjectWorkHistoryTechStack(String alias) {
    this(DSL.name(alias), DEVELOPER_PROJECT_WORK_HISTORY_TECH_STACK);
  }

  /**
   * Create an aliased <code>sion.developer_project_work_history_tech_stack</code> table reference
   */
  public DeveloperProjectWorkHistoryTechStack(Name alias) {
    this(alias, DEVELOPER_PROJECT_WORK_HISTORY_TECH_STACK);
  }

  /** Create a <code>sion.developer_project_work_history_tech_stack</code> table reference */
  public DeveloperProjectWorkHistoryTechStack() {
    this(DSL.name("developer_project_work_history_tech_stack"), null);
  }

  public <O extends Record> DeveloperProjectWorkHistoryTechStack(
      Table<O> child, ForeignKey<O, DeveloperProjectWorkHistoryTechStackRecord> key) {
    super(child, key, DEVELOPER_PROJECT_WORK_HISTORY_TECH_STACK);
  }

  @Override
  public Schema getSchema() {
    return aliased() ? null : Sion.SION;
  }

  @Override
  public Identity<DeveloperProjectWorkHistoryTechStackRecord, Long> getIdentity() {
    return (Identity<DeveloperProjectWorkHistoryTechStackRecord, Long>) super.getIdentity();
  }

  @Override
  public UniqueKey<DeveloperProjectWorkHistoryTechStackRecord> getPrimaryKey() {
    return Keys.KEY_DEVELOPER_PROJECT_WORK_HISTORY_TECH_STACK_PRIMARY;
  }

  @Override
  public List<ForeignKey<DeveloperProjectWorkHistoryTechStackRecord, ?>> getReferences() {
    return Arrays.asList(Keys.FK_DPWH_TS_DPWH);
  }

  private transient DeveloperProjectWorkHistory _developerProjectWorkHistory;

  /** Get the implicit join path to the <code>sion.developer_project_work_history</code> table. */
  public DeveloperProjectWorkHistory developerProjectWorkHistory() {
    if (_developerProjectWorkHistory == null)
      _developerProjectWorkHistory = new DeveloperProjectWorkHistory(this, Keys.FK_DPWH_TS_DPWH);

    return _developerProjectWorkHistory;
  }

  @Override
  public DeveloperProjectWorkHistoryTechStack as(String alias) {
    return new DeveloperProjectWorkHistoryTechStack(DSL.name(alias), this);
  }

  @Override
  public DeveloperProjectWorkHistoryTechStack as(Name alias) {
    return new DeveloperProjectWorkHistoryTechStack(alias, this);
  }

  @Override
  public DeveloperProjectWorkHistoryTechStack as(Table<?> alias) {
    return new DeveloperProjectWorkHistoryTechStack(alias.getQualifiedName(), this);
  }

  /** Rename this table */
  @Override
  public DeveloperProjectWorkHistoryTechStack rename(String name) {
    return new DeveloperProjectWorkHistoryTechStack(DSL.name(name), null);
  }

  /** Rename this table */
  @Override
  public DeveloperProjectWorkHistoryTechStack rename(Name name) {
    return new DeveloperProjectWorkHistoryTechStack(name, null);
  }

  /** Rename this table */
  @Override
  public DeveloperProjectWorkHistoryTechStack rename(Table<?> name) {
    return new DeveloperProjectWorkHistoryTechStack(name.getQualifiedName(), null);
  }

  // -------------------------------------------------------------------------
  // Row3 type methods
  // -------------------------------------------------------------------------

  @Override
  public Row3<Long, Long, String> fieldsRow() {
    return (Row3) super.fieldsRow();
  }

  /** Convenience mapping calling {@link SelectField#convertFrom(Function)}. */
  public <U> SelectField<U> mapping(
      Function3<? super Long, ? super Long, ? super String, ? extends U> from) {
    return convertFrom(Records.mapping(from));
  }

  /** Convenience mapping calling {@link SelectField#convertFrom(Class, Function)}. */
  public <U> SelectField<U> mapping(
      Class<U> toType, Function3<? super Long, ? super Long, ? super String, ? extends U> from) {
    return convertFrom(toType, Records.mapping(from));
  }
}
