/*
 * This file is generated by jOOQ.
 */
package com.example.jooq.generated.tables;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function11;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row11;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import com.example.jooq.generated.Keys;
import com.example.jooq.generated.Sion;
import com.example.jooq.generated.enums.SquadOriginType;
import com.example.jooq.generated.tables.records.SquadRecord;

/** This class is generated by jOOQ. */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class Squad extends TableImpl<SquadRecord> {

  private static final long serialVersionUID = 1L;

  /** The reference instance of <code>SION.squad</code> */
  public static final Squad SQUAD = new Squad();

  /** The class holding records for this type */
  @Override
  public Class<SquadRecord> getRecordType() {
    return SquadRecord.class;
  }

  /** The column <code>SION.squad.squad_code</code>. */
  public final TableField<SquadRecord, String> SQUAD_CODE =
      createField(DSL.name("squad_code"), SQLDataType.VARCHAR(30).nullable(false), this, "");

  /** The column <code>SION.squad.project_code</code>. */
  public final TableField<SquadRecord, String> PROJECT_CODE =
      createField(DSL.name("project_code"), SQLDataType.VARCHAR(30).nullable(false), this, "");

  /** The column <code>SION.squad.title</code>. */
  public final TableField<SquadRecord, String> TITLE =
      createField(DSL.name("title"), SQLDataType.VARCHAR(30).nullable(false), this, "");

  /** The column <code>SION.squad.description</code>. */
  public final TableField<SquadRecord, String> DESCRIPTION =
      createField(
          DSL.name("description"),
          SQLDataType.VARCHAR(255).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.VARCHAR)),
          this,
          "");

  /** The column <code>SION.squad.is_active</code>. */
  public final TableField<SquadRecord, Byte> IS_ACTIVE =
      createField(DSL.name("is_active"), SQLDataType.TINYINT.nullable(false), this, "");

  /** The column <code>SION.squad.created_at</code>. */
  public final TableField<SquadRecord, LocalDateTime> CREATED_AT =
      createField(
          DSL.name("created_at"),
          SQLDataType.LOCALDATETIME(0)
              .nullable(false)
              .defaultValue(DSL.field(DSL.raw("current_timestamp()"), SQLDataType.LOCALDATETIME)),
          this,
          "");

  /** The column <code>SION.squad.updated_at</code>. */
  public final TableField<SquadRecord, LocalDateTime> UPDATED_AT =
      createField(
          DSL.name("updated_at"),
          SQLDataType.LOCALDATETIME(0)
              .nullable(false)
              .defaultValue(DSL.field(DSL.raw("current_timestamp()"), SQLDataType.LOCALDATETIME)),
          this,
          "");

  /** The column <code>SION.squad.estimated_duration</code>. */
  public final TableField<SquadRecord, BigDecimal> ESTIMATED_DURATION =
      createField(
          DSL.name("estimated_duration"),
          SQLDataType.DECIMAL(5, 2).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.DECIMAL)),
          this,
          "");

  /** The column <code>SION.squad.estimated_cost</code>. */
  public final TableField<SquadRecord, BigDecimal> ESTIMATED_COST =
      createField(
          DSL.name("estimated_cost"),
          SQLDataType.DECIMAL(12, 2).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.DECIMAL)),
          this,
          "");

  /** The column <code>SION.squad.origin_type</code>. */
  public final TableField<SquadRecord, SquadOriginType> ORIGIN_TYPE =
      createField(
          DSL.name("origin_type"),
          SQLDataType.VARCHAR(6)
              .nullable(false)
              .asEnumDataType(com.example.jooq.generated.enums.SquadOriginType.class),
          this,
          "");

  /** The column <code>SION.squad.recommendation_reason</code>. */
  public final TableField<SquadRecord, String> RECOMMENDATION_REASON =
      createField(
          DSL.name("recommendation_reason"),
          SQLDataType.CLOB.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.CLOB)),
          this,
          "");

  private Squad(Name alias, Table<SquadRecord> aliased) {
    this(alias, aliased, null);
  }

  private Squad(Name alias, Table<SquadRecord> aliased, Field<?>[] parameters) {
    super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
  }

  /** Create an aliased <code>SION.squad</code> table reference */
  public Squad(String alias) {
    this(DSL.name(alias), SQUAD);
  }

  /** Create an aliased <code>SION.squad</code> table reference */
  public Squad(Name alias) {
    this(alias, SQUAD);
  }

  /** Create a <code>SION.squad</code> table reference */
  public Squad() {
    this(DSL.name("squad"), null);
  }

  public <O extends Record> Squad(Table<O> child, ForeignKey<O, SquadRecord> key) {
    super(child, key, SQUAD);
  }

  @Override
  public Schema getSchema() {
    return aliased() ? null : Sion.SION;
  }

  @Override
  public UniqueKey<SquadRecord> getPrimaryKey() {
    return Keys.KEY_SQUAD_PRIMARY;
  }

  @Override
  public List<ForeignKey<SquadRecord, ?>> getReferences() {
    return Arrays.asList(Keys.FK_PROJECT_TO_SQUAD_1);
  }

  private transient Project _project;

  /** Get the implicit join path to the <code>SION.project</code> table. */
  public Project project() {
    if (_project == null) _project = new Project(this, Keys.FK_PROJECT_TO_SQUAD_1);

    return _project;
  }

  @Override
  public Squad as(String alias) {
    return new Squad(DSL.name(alias), this);
  }

  @Override
  public Squad as(Name alias) {
    return new Squad(alias, this);
  }

  @Override
  public Squad as(Table<?> alias) {
    return new Squad(alias.getQualifiedName(), this);
  }

  /** Rename this table */
  @Override
  public Squad rename(String name) {
    return new Squad(DSL.name(name), null);
  }

  /** Rename this table */
  @Override
  public Squad rename(Name name) {
    return new Squad(name, null);
  }

  /** Rename this table */
  @Override
  public Squad rename(Table<?> name) {
    return new Squad(name.getQualifiedName(), null);
  }

  // -------------------------------------------------------------------------
  // Row11 type methods
  // -------------------------------------------------------------------------

  @Override
  public Row11<
          String,
          String,
          String,
          String,
          Byte,
          LocalDateTime,
          LocalDateTime,
          BigDecimal,
          BigDecimal,
          SquadOriginType,
          String>
      fieldsRow() {
    return (Row11) super.fieldsRow();
  }

  /** Convenience mapping calling {@link SelectField#convertFrom(Function)}. */
  public <U> SelectField<U> mapping(
      Function11<
              ? super String,
              ? super String,
              ? super String,
              ? super String,
              ? super Byte,
              ? super LocalDateTime,
              ? super LocalDateTime,
              ? super BigDecimal,
              ? super BigDecimal,
              ? super SquadOriginType,
              ? super String,
              ? extends U>
          from) {
    return convertFrom(Records.mapping(from));
  }

  /** Convenience mapping calling {@link SelectField#convertFrom(Class, Function)}. */
  public <U> SelectField<U> mapping(
      Class<U> toType,
      Function11<
              ? super String,
              ? super String,
              ? super String,
              ? super String,
              ? super Byte,
              ? super LocalDateTime,
              ? super LocalDateTime,
              ? super BigDecimal,
              ? super BigDecimal,
              ? super SquadOriginType,
              ? super String,
              ? extends U>
          from) {
    return convertFrom(toType, Records.mapping(from));
  }
}
