/*
 * This file is generated by jOOQ.
 */
package com.example.jooq.generated.tables.records;

import java.time.LocalDateTime;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record5;
import org.jooq.Row5;
import org.jooq.impl.UpdatableRecordImpl;

import com.example.jooq.generated.tables.Certificate;

/** This class is generated by jOOQ. */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class CertificateRecord extends UpdatableRecordImpl<CertificateRecord>
    implements Record5<String, Integer, LocalDateTime, LocalDateTime, String> {

  private static final long serialVersionUID = 1L;

  /** Setter for <code>sion.certificate.certificate_name</code>. */
  public void setCertificateName(String value) {
    set(0, value);
  }

  /** Getter for <code>sion.certificate.certificate_name</code>. */
  public String getCertificateName() {
    return (String) get(0);
  }

  /** Setter for <code>sion.certificate.score</code>. */
  public void setScore(Integer value) {
    set(1, value);
  }

  /** Getter for <code>sion.certificate.score</code>. */
  public Integer getScore() {
    return (Integer) get(1);
  }

  /** Setter for <code>sion.certificate.created_at</code>. */
  public void setCreatedAt(LocalDateTime value) {
    set(2, value);
  }

  /** Getter for <code>sion.certificate.created_at</code>. */
  public LocalDateTime getCreatedAt() {
    return (LocalDateTime) get(2);
  }

  /** Setter for <code>sion.certificate.updated_at</code>. */
  public void setUpdatedAt(LocalDateTime value) {
    set(3, value);
  }

  /** Getter for <code>sion.certificate.updated_at</code>. */
  public LocalDateTime getUpdatedAt() {
    return (LocalDateTime) get(3);
  }

  /** Setter for <code>sion.certificate.issuing_organization</code>. */
  public void setIssuingOrganization(String value) {
    set(4, value);
  }

  /** Getter for <code>sion.certificate.issuing_organization</code>. */
  public String getIssuingOrganization() {
    return (String) get(4);
  }

  // -------------------------------------------------------------------------
  // Primary key information
  // -------------------------------------------------------------------------

  @Override
  public Record1<String> key() {
    return (Record1) super.key();
  }

  // -------------------------------------------------------------------------
  // Record5 type implementation
  // -------------------------------------------------------------------------

  @Override
  public Row5<String, Integer, LocalDateTime, LocalDateTime, String> fieldsRow() {
    return (Row5) super.fieldsRow();
  }

  @Override
  public Row5<String, Integer, LocalDateTime, LocalDateTime, String> valuesRow() {
    return (Row5) super.valuesRow();
  }

  @Override
  public Field<String> field1() {
    return Certificate.CERTIFICATE.CERTIFICATE_NAME;
  }

  @Override
  public Field<Integer> field2() {
    return Certificate.CERTIFICATE.SCORE;
  }

  @Override
  public Field<LocalDateTime> field3() {
    return Certificate.CERTIFICATE.CREATED_AT;
  }

  @Override
  public Field<LocalDateTime> field4() {
    return Certificate.CERTIFICATE.UPDATED_AT;
  }

  @Override
  public Field<String> field5() {
    return Certificate.CERTIFICATE.ISSUING_ORGANIZATION;
  }

  @Override
  public String component1() {
    return getCertificateName();
  }

  @Override
  public Integer component2() {
    return getScore();
  }

  @Override
  public LocalDateTime component3() {
    return getCreatedAt();
  }

  @Override
  public LocalDateTime component4() {
    return getUpdatedAt();
  }

  @Override
  public String component5() {
    return getIssuingOrganization();
  }

  @Override
  public String value1() {
    return getCertificateName();
  }

  @Override
  public Integer value2() {
    return getScore();
  }

  @Override
  public LocalDateTime value3() {
    return getCreatedAt();
  }

  @Override
  public LocalDateTime value4() {
    return getUpdatedAt();
  }

  @Override
  public String value5() {
    return getIssuingOrganization();
  }

  @Override
  public CertificateRecord value1(String value) {
    setCertificateName(value);
    return this;
  }

  @Override
  public CertificateRecord value2(Integer value) {
    setScore(value);
    return this;
  }

  @Override
  public CertificateRecord value3(LocalDateTime value) {
    setCreatedAt(value);
    return this;
  }

  @Override
  public CertificateRecord value4(LocalDateTime value) {
    setUpdatedAt(value);
    return this;
  }

  @Override
  public CertificateRecord value5(String value) {
    setIssuingOrganization(value);
    return this;
  }

  @Override
  public CertificateRecord values(
      String value1, Integer value2, LocalDateTime value3, LocalDateTime value4, String value5) {
    value1(value1);
    value2(value2);
    value3(value3);
    value4(value4);
    value5(value5);
    return this;
  }

  // -------------------------------------------------------------------------
  // Constructors
  // -------------------------------------------------------------------------

  /** Create a detached CertificateRecord */
  public CertificateRecord() {
    super(Certificate.CERTIFICATE);
  }

  /** Create a detached, initialised CertificateRecord */
  public CertificateRecord(
      String certificateName,
      Integer score,
      LocalDateTime createdAt,
      LocalDateTime updatedAt,
      String issuingOrganization) {
    super(Certificate.CERTIFICATE);

    setCertificateName(certificateName);
    setScore(score);
    setCreatedAt(createdAt);
    setUpdatedAt(updatedAt);
    setIssuingOrganization(issuingOrganization);
    resetChangedOnNotNull();
  }

  /** Create a detached, initialised CertificateRecord */
  public CertificateRecord(com.example.jooq.generated.tables.pojos.Certificate value) {
    super(Certificate.CERTIFICATE);

    if (value != null) {
      setCertificateName(value.getCertificateName());
      setScore(value.getScore());
      setCreatedAt(value.getCreatedAt());
      setUpdatedAt(value.getUpdatedAt());
      setIssuingOrganization(value.getIssuingOrganization());
      resetChangedOnNotNull();
    }
  }
}
