/*
 * This file is generated by jOOQ.
 */
package com.example.jooq.generated.tables;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function10;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row10;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import com.example.jooq.generated.Keys;
import com.example.jooq.generated.Sion;
import com.example.jooq.generated.tables.records.ProjectEvaluationRecord;

/** This class is generated by jOOQ. */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class ProjectEvaluation extends TableImpl<ProjectEvaluationRecord> {

  private static final long serialVersionUID = 1L;

  /** The reference instance of <code>SION.project_evaluation</code> */
  public static final ProjectEvaluation PROJECT_EVALUATION = new ProjectEvaluation();

  /** The class holding records for this type */
  @Override
  public Class<ProjectEvaluationRecord> getRecordType() {
    return ProjectEvaluationRecord.class;
  }

  /** The column <code>SION.project_evaluation.project_evaluation_id</code>. */
  public final TableField<ProjectEvaluationRecord, Long> PROJECT_EVALUATION_ID =
      createField(DSL.name("project_evaluation_id"), SQLDataType.BIGINT.nullable(false), this, "");

  /** The column <code>SION.project_evaluation.project_code</code>. */
  public final TableField<ProjectEvaluationRecord, String> PROJECT_CODE =
      createField(DSL.name("project_code"), SQLDataType.VARCHAR(30).nullable(false), this, "");

  /** The column <code>SION.project_evaluation.developer_id</code>. */
  public final TableField<ProjectEvaluationRecord, Long> DEVELOPER_ID =
      createField(DSL.name("developer_id"), SQLDataType.BIGINT.nullable(false), this, "");

  /** The column <code>SION.project_evaluation.estimator_id</code>. */
  public final TableField<ProjectEvaluationRecord, Long> ESTIMATOR_ID =
      createField(DSL.name("estimator_id"), SQLDataType.BIGINT.nullable(false), this, "");

  /** The column <code>SION.project_evaluation.tech_fit</code>. */
  public final TableField<ProjectEvaluationRecord, Integer> TECH_FIT =
      createField(DSL.name("tech_fit"), SQLDataType.INTEGER.nullable(false), this, "");

  /** The column <code>SION.project_evaluation.communication</code>. */
  public final TableField<ProjectEvaluationRecord, Integer> COMMUNICATION =
      createField(DSL.name("communication"), SQLDataType.INTEGER.nullable(false), this, "");

  /** The column <code>SION.project_evaluation.problem_solving</code>. */
  public final TableField<ProjectEvaluationRecord, Integer> PROBLEM_SOLVING =
      createField(DSL.name("problem_solving"), SQLDataType.INTEGER.nullable(false), this, "");

  /** The column <code>SION.project_evaluation.cooperation_attitude</code>. */
  public final TableField<ProjectEvaluationRecord, Integer> COOPERATION_ATTITUDE =
      createField(DSL.name("cooperation_attitude"), SQLDataType.INTEGER.nullable(false), this, "");

  /** The column <code>SION.project_evaluation.created_at</code>. */
  public final TableField<ProjectEvaluationRecord, LocalDateTime> CREATED_AT =
      createField(
          DSL.name("created_at"),
          SQLDataType.LOCALDATETIME(0)
              .nullable(false)
              .defaultValue(DSL.field(DSL.raw("current_timestamp()"), SQLDataType.LOCALDATETIME)),
          this,
          "");

  /** The column <code>SION.project_evaluation.updated_at</code>. */
  public final TableField<ProjectEvaluationRecord, LocalDateTime> UPDATED_AT =
      createField(
          DSL.name("updated_at"),
          SQLDataType.LOCALDATETIME(0)
              .nullable(false)
              .defaultValue(DSL.field(DSL.raw("current_timestamp()"), SQLDataType.LOCALDATETIME)),
          this,
          "");

  private ProjectEvaluation(Name alias, Table<ProjectEvaluationRecord> aliased) {
    this(alias, aliased, null);
  }

  private ProjectEvaluation(
      Name alias, Table<ProjectEvaluationRecord> aliased, Field<?>[] parameters) {
    super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
  }

  /** Create an aliased <code>SION.project_evaluation</code> table reference */
  public ProjectEvaluation(String alias) {
    this(DSL.name(alias), PROJECT_EVALUATION);
  }

  /** Create an aliased <code>SION.project_evaluation</code> table reference */
  public ProjectEvaluation(Name alias) {
    this(alias, PROJECT_EVALUATION);
  }

  /** Create a <code>SION.project_evaluation</code> table reference */
  public ProjectEvaluation() {
    this(DSL.name("project_evaluation"), null);
  }

  public <O extends Record> ProjectEvaluation(
      Table<O> child, ForeignKey<O, ProjectEvaluationRecord> key) {
    super(child, key, PROJECT_EVALUATION);
  }

  @Override
  public Schema getSchema() {
    return aliased() ? null : Sion.SION;
  }

  @Override
  public UniqueKey<ProjectEvaluationRecord> getPrimaryKey() {
    return Keys.KEY_PROJECT_EVALUATION_PRIMARY;
  }

  @Override
  public List<ForeignKey<ProjectEvaluationRecord, ?>> getReferences() {
    return Arrays.asList(
        Keys.FK_PROJECT_TO_PROJECT_EVALUATION_1,
        Keys.FK_SQUAD_EMPLOYEE_TO_PROJECT_EVALUATION_1,
        Keys.FK_SQUAD_EMPLOYEE_TO_PROJECT_EVALUATION_2);
  }

  private transient Project _project;
  private transient SquadEmployee _fkSquadEmployeeToProjectEvaluation_1;
  private transient SquadEmployee _fkSquadEmployeeToProjectEvaluation_2;

  /** Get the implicit join path to the <code>SION.project</code> table. */
  public Project project() {
    if (_project == null) _project = new Project(this, Keys.FK_PROJECT_TO_PROJECT_EVALUATION_1);

    return _project;
  }

  /**
   * Get the implicit join path to the <code>SION.squad_employee</code> table, via the <code>
   * FK_squad_employee_TO_project_evaluation_1</code> key.
   */
  public SquadEmployee fkSquadEmployeeToProjectEvaluation_1() {
    if (_fkSquadEmployeeToProjectEvaluation_1 == null)
      _fkSquadEmployeeToProjectEvaluation_1 =
          new SquadEmployee(this, Keys.FK_SQUAD_EMPLOYEE_TO_PROJECT_EVALUATION_1);

    return _fkSquadEmployeeToProjectEvaluation_1;
  }

  /**
   * Get the implicit join path to the <code>SION.squad_employee</code> table, via the <code>
   * FK_squad_employee_TO_project_evaluation_2</code> key.
   */
  public SquadEmployee fkSquadEmployeeToProjectEvaluation_2() {
    if (_fkSquadEmployeeToProjectEvaluation_2 == null)
      _fkSquadEmployeeToProjectEvaluation_2 =
          new SquadEmployee(this, Keys.FK_SQUAD_EMPLOYEE_TO_PROJECT_EVALUATION_2);

    return _fkSquadEmployeeToProjectEvaluation_2;
  }

  @Override
  public ProjectEvaluation as(String alias) {
    return new ProjectEvaluation(DSL.name(alias), this);
  }

  @Override
  public ProjectEvaluation as(Name alias) {
    return new ProjectEvaluation(alias, this);
  }

  @Override
  public ProjectEvaluation as(Table<?> alias) {
    return new ProjectEvaluation(alias.getQualifiedName(), this);
  }

  /** Rename this table */
  @Override
  public ProjectEvaluation rename(String name) {
    return new ProjectEvaluation(DSL.name(name), null);
  }

  /** Rename this table */
  @Override
  public ProjectEvaluation rename(Name name) {
    return new ProjectEvaluation(name, null);
  }

  /** Rename this table */
  @Override
  public ProjectEvaluation rename(Table<?> name) {
    return new ProjectEvaluation(name.getQualifiedName(), null);
  }

  // -------------------------------------------------------------------------
  // Row10 type methods
  // -------------------------------------------------------------------------

  @Override
  public Row10<
          Long,
          String,
          Long,
          Long,
          Integer,
          Integer,
          Integer,
          Integer,
          LocalDateTime,
          LocalDateTime>
      fieldsRow() {
    return (Row10) super.fieldsRow();
  }

  /** Convenience mapping calling {@link SelectField#convertFrom(Function)}. */
  public <U> SelectField<U> mapping(
      Function10<
              ? super Long,
              ? super String,
              ? super Long,
              ? super Long,
              ? super Integer,
              ? super Integer,
              ? super Integer,
              ? super Integer,
              ? super LocalDateTime,
              ? super LocalDateTime,
              ? extends U>
          from) {
    return convertFrom(Records.mapping(from));
  }

  /** Convenience mapping calling {@link SelectField#convertFrom(Class, Function)}. */
  public <U> SelectField<U> mapping(
      Class<U> toType,
      Function10<
              ? super Long,
              ? super String,
              ? super Long,
              ? super Long,
              ? super Integer,
              ? super Integer,
              ? super Integer,
              ? super Integer,
              ? super LocalDateTime,
              ? super LocalDateTime,
              ? extends U>
          from) {
    return convertFrom(toType, Records.mapping(from));
  }
}
