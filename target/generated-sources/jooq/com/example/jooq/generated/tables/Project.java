/*
 * This file is generated by jOOQ.
 */
package com.example.jooq.generated.tables;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function15;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row15;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import com.example.jooq.generated.Keys;
import com.example.jooq.generated.Sion;
import com.example.jooq.generated.enums.ProjectStatus;
import com.example.jooq.generated.tables.records.ProjectRecord;

/** This class is generated by jOOQ. */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class Project extends TableImpl<ProjectRecord> {

  private static final long serialVersionUID = 1L;

  /** The reference instance of <code>SION.project</code> */
  public static final Project PROJECT = new Project();

  /** The class holding records for this type */
  @Override
  public Class<ProjectRecord> getRecordType() {
    return ProjectRecord.class;
  }

  /** The column <code>SION.project.project_code</code>. */
  public final TableField<ProjectRecord, String> PROJECT_CODE =
      createField(DSL.name("project_code"), SQLDataType.VARCHAR(30).nullable(false), this, "");

  /** The column <code>SION.project.description</code>. */
  public final TableField<ProjectRecord, String> DESCRIPTION =
      createField(DSL.name("description"), SQLDataType.CLOB.nullable(false), this, "");

  /** The column <code>SION.project.title</code>. */
  public final TableField<ProjectRecord, String> TITLE =
      createField(DSL.name("title"), SQLDataType.VARCHAR(30).nullable(false), this, "");

  /** The column <code>SION.project.budget</code>. */
  public final TableField<ProjectRecord, Long> BUDGET =
      createField(DSL.name("budget"), SQLDataType.BIGINT.nullable(false), this, "");

  /** The column <code>SION.project.start_date</code>. */
  public final TableField<ProjectRecord, LocalDate> START_DATE =
      createField(DSL.name("start_date"), SQLDataType.LOCALDATE.nullable(false), this, "");

  /** The column <code>SION.project.expected_end_date</code>. */
  public final TableField<ProjectRecord, LocalDate> EXPECTED_END_DATE =
      createField(DSL.name("expected_end_date"), SQLDataType.LOCALDATE.nullable(false), this, "");

  /** The column <code>SION.project.actual_end_date</code>. */
  public final TableField<ProjectRecord, LocalDate> ACTUAL_END_DATE =
      createField(DSL.name("actual_end_date"), SQLDataType.LOCALDATE.nullable(false), this, "");

  /** The column <code>SION.project.status</code>. */
  public final TableField<ProjectRecord, ProjectStatus> STATUS =
      createField(
          DSL.name("status"),
          SQLDataType.VARCHAR(11)
              .nullable(false)
              .asEnumDataType(com.example.jooq.generated.enums.ProjectStatus.class),
          this,
          "");

  /** The column <code>SION.project.number_of_members</code>. */
  public final TableField<ProjectRecord, Integer> NUMBER_OF_MEMBERS =
      createField(
          DSL.name("number_of_members"),
          SQLDataType.INTEGER.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.INTEGER)),
          this,
          "");

  /** The column <code>SION.project.created_at</code>. */
  public final TableField<ProjectRecord, LocalDateTime> CREATED_AT =
      createField(
          DSL.name("created_at"),
          SQLDataType.LOCALDATETIME(0)
              .nullable(false)
              .defaultValue(DSL.field(DSL.raw("current_timestamp()"), SQLDataType.LOCALDATETIME)),
          this,
          "");

  /** The column <code>SION.project.updated_at</code>. */
  public final TableField<ProjectRecord, LocalDateTime> UPDATED_AT =
      createField(
          DSL.name("updated_at"),
          SQLDataType.LOCALDATETIME(0)
              .nullable(false)
              .defaultValue(DSL.field(DSL.raw("current_timestamp()"), SQLDataType.LOCALDATETIME)),
          this,
          "");

  /** The column <code>SION.project.deleted_at</code>. */
  public final TableField<ProjectRecord, LocalDateTime> DELETED_AT =
      createField(
          DSL.name("deleted_at"),
          SQLDataType.LOCALDATETIME(0)
              .defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.LOCALDATETIME)),
          this,
          "");

  /** The column <code>SION.project.client_code</code>. */
  public final TableField<ProjectRecord, String> CLIENT_CODE =
      createField(DSL.name("client_code"), SQLDataType.VARCHAR(30).nullable(false), this, "");

  /** The column <code>SION.project.request_specification_url</code>. */
  public final TableField<ProjectRecord, String> REQUEST_SPECIFICATION_URL =
      createField(
          DSL.name("request_specification_url"),
          SQLDataType.VARCHAR(255).nullable(false),
          this,
          "");

  /** The column <code>SION.project.name</code>. */
  public final TableField<ProjectRecord, String> NAME =
      createField(DSL.name("name"), SQLDataType.VARCHAR(30).nullable(false), this, "");

  private Project(Name alias, Table<ProjectRecord> aliased) {
    this(alias, aliased, null);
  }

  private Project(Name alias, Table<ProjectRecord> aliased, Field<?>[] parameters) {
    super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
  }

  /** Create an aliased <code>SION.project</code> table reference */
  public Project(String alias) {
    this(DSL.name(alias), PROJECT);
  }

  /** Create an aliased <code>SION.project</code> table reference */
  public Project(Name alias) {
    this(alias, PROJECT);
  }

  /** Create a <code>SION.project</code> table reference */
  public Project() {
    this(DSL.name("project"), null);
  }

  public <O extends Record> Project(Table<O> child, ForeignKey<O, ProjectRecord> key) {
    super(child, key, PROJECT);
  }

  @Override
  public Schema getSchema() {
    return aliased() ? null : Sion.SION;
  }

  @Override
  public UniqueKey<ProjectRecord> getPrimaryKey() {
    return Keys.KEY_PROJECT_PRIMARY;
  }

  @Override
  public List<ForeignKey<ProjectRecord, ?>> getReferences() {
    return Arrays.asList(Keys.FK_CLIENT_COMPANY_TO_PROJECT_1, Keys.FK_DOMAIN_TO_PROJECT_1);
  }

  private transient ClientCompany _clientCompany;
  private transient Domain _domain;

  /** Get the implicit join path to the <code>SION.client_company</code> table. */
  public ClientCompany clientCompany() {
    if (_clientCompany == null)
      _clientCompany = new ClientCompany(this, Keys.FK_CLIENT_COMPANY_TO_PROJECT_1);

    return _clientCompany;
  }

  /** Get the implicit join path to the <code>SION.domain</code> table. */
  public Domain domain() {
    if (_domain == null) _domain = new Domain(this, Keys.FK_DOMAIN_TO_PROJECT_1);

    return _domain;
  }

  @Override
  public Project as(String alias) {
    return new Project(DSL.name(alias), this);
  }

  @Override
  public Project as(Name alias) {
    return new Project(alias, this);
  }

  @Override
  public Project as(Table<?> alias) {
    return new Project(alias.getQualifiedName(), this);
  }

  /** Rename this table */
  @Override
  public Project rename(String name) {
    return new Project(DSL.name(name), null);
  }

  /** Rename this table */
  @Override
  public Project rename(Name name) {
    return new Project(name, null);
  }

  /** Rename this table */
  @Override
  public Project rename(Table<?> name) {
    return new Project(name.getQualifiedName(), null);
  }

  // -------------------------------------------------------------------------
  // Row15 type methods
  // -------------------------------------------------------------------------

  @Override
  public Row15<
          String,
          String,
          String,
          Long,
          LocalDate,
          LocalDate,
          LocalDate,
          ProjectStatus,
          Integer,
          LocalDateTime,
          LocalDateTime,
          LocalDateTime,
          String,
          String,
          String>
      fieldsRow() {
    return (Row15) super.fieldsRow();
  }

  /** Convenience mapping calling {@link SelectField#convertFrom(Function)}. */
  public <U> SelectField<U> mapping(
      Function15<
              ? super String,
              ? super String,
              ? super String,
              ? super Long,
              ? super LocalDate,
              ? super LocalDate,
              ? super LocalDate,
              ? super ProjectStatus,
              ? super Integer,
              ? super LocalDateTime,
              ? super LocalDateTime,
              ? super LocalDateTime,
              ? super String,
              ? super String,
              ? super String,
              ? extends U>
          from) {
    return convertFrom(Records.mapping(from));
  }

  /** Convenience mapping calling {@link SelectField#convertFrom(Class, Function)}. */
  public <U> SelectField<U> mapping(
      Class<U> toType,
      Function15<
              ? super String,
              ? super String,
              ? super String,
              ? super Long,
              ? super LocalDate,
              ? super LocalDate,
              ? super LocalDate,
              ? super ProjectStatus,
              ? super Integer,
              ? super LocalDateTime,
              ? super LocalDateTime,
              ? super LocalDateTime,
              ? super String,
              ? super String,
              ? super String,
              ? extends U>
          from) {
    return convertFrom(toType, Records.mapping(from));
  }
}
