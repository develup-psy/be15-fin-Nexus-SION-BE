/*
 * This file is generated by jOOQ.
 */
package com.example.jooq.generated.tables;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function8;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import com.example.jooq.generated.Keys;
import com.example.jooq.generated.Sion;
import com.example.jooq.generated.enums.DeveloperProjectWorkApprovalStatus;
import com.example.jooq.generated.tables.records.DeveloperProjectWorkRecord;

/** This class is generated by jOOQ. */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class DeveloperProjectWork extends TableImpl<DeveloperProjectWorkRecord> {

  private static final long serialVersionUID = 1L;

  /** The reference instance of <code>sion.developer_project_work</code> */
  public static final DeveloperProjectWork DEVELOPER_PROJECT_WORK = new DeveloperProjectWork();

  /** The class holding records for this type */
  @Override
  public Class<DeveloperProjectWorkRecord> getRecordType() {
    return DeveloperProjectWorkRecord.class;
  }

  /** The column <code>sion.developer_project_work.developer_project_work_id</code>. */
  public final TableField<DeveloperProjectWorkRecord, Long> DEVELOPER_PROJECT_WORK_ID =
      createField(
          DSL.name("developer_project_work_id"),
          SQLDataType.BIGINT.nullable(false).identity(true),
          this,
          "");

  /** The column <code>sion.developer_project_work.employee_identification_number</code>. */
  public final TableField<DeveloperProjectWorkRecord, String> EMPLOYEE_IDENTIFICATION_NUMBER =
      createField(
          DSL.name("employee_identification_number"),
          SQLDataType.VARCHAR(30).nullable(false),
          this,
          "");

  /** The column <code>sion.developer_project_work.project_code</code>. */
  public final TableField<DeveloperProjectWorkRecord, String> PROJECT_CODE =
      createField(DSL.name("project_code"), SQLDataType.VARCHAR(30).nullable(false), this, "");

  /** The column <code>sion.developer_project_work.approval_status</code>. */
  public final TableField<DeveloperProjectWorkRecord, DeveloperProjectWorkApprovalStatus>
      APPROVAL_STATUS =
          createField(
              DSL.name("approval_status"),
              SQLDataType.VARCHAR(13)
                  .nullable(false)
                  .defaultValue(DSL.field(DSL.raw("'PENDING'"), SQLDataType.VARCHAR))
                  .asEnumDataType(
                      com.example.jooq.generated.enums.DeveloperProjectWorkApprovalStatus.class),
              this,
              "");

  /** The column <code>sion.developer_project_work.approved_by</code>. */
  public final TableField<DeveloperProjectWorkRecord, String> APPROVED_BY =
      createField(
          DSL.name("approved_by"),
          SQLDataType.VARCHAR(30).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.VARCHAR)),
          this,
          "");

  /** The column <code>sion.developer_project_work.approved_at</code>. */
  public final TableField<DeveloperProjectWorkRecord, LocalDateTime> APPROVED_AT =
      createField(
          DSL.name("approved_at"),
          SQLDataType.LOCALDATETIME(0)
              .defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.LOCALDATETIME)),
          this,
          "");

  /** The column <code>sion.developer_project_work.created_at</code>. */
  public final TableField<DeveloperProjectWorkRecord, LocalDateTime> CREATED_AT =
      createField(
          DSL.name("created_at"),
          SQLDataType.LOCALDATETIME(0)
              .nullable(false)
              .defaultValue(DSL.field(DSL.raw("current_timestamp()"), SQLDataType.LOCALDATETIME)),
          this,
          "");

  /** The column <code>sion.developer_project_work.updated_at</code>. */
  public final TableField<DeveloperProjectWorkRecord, LocalDateTime> UPDATED_AT =
      createField(
          DSL.name("updated_at"),
          SQLDataType.LOCALDATETIME(0)
              .nullable(false)
              .defaultValue(DSL.field(DSL.raw("current_timestamp()"), SQLDataType.LOCALDATETIME)),
          this,
          "");

  private DeveloperProjectWork(Name alias, Table<DeveloperProjectWorkRecord> aliased) {
    this(alias, aliased, null);
  }

  private DeveloperProjectWork(
      Name alias, Table<DeveloperProjectWorkRecord> aliased, Field<?>[] parameters) {
    super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
  }

  /** Create an aliased <code>sion.developer_project_work</code> table reference */
  public DeveloperProjectWork(String alias) {
    this(DSL.name(alias), DEVELOPER_PROJECT_WORK);
  }

  /** Create an aliased <code>sion.developer_project_work</code> table reference */
  public DeveloperProjectWork(Name alias) {
    this(alias, DEVELOPER_PROJECT_WORK);
  }

  /** Create a <code>sion.developer_project_work</code> table reference */
  public DeveloperProjectWork() {
    this(DSL.name("developer_project_work"), null);
  }

  public <O extends Record> DeveloperProjectWork(
      Table<O> child, ForeignKey<O, DeveloperProjectWorkRecord> key) {
    super(child, key, DEVELOPER_PROJECT_WORK);
  }

  @Override
  public Schema getSchema() {
    return aliased() ? null : Sion.SION;
  }

  @Override
  public Identity<DeveloperProjectWorkRecord, Long> getIdentity() {
    return (Identity<DeveloperProjectWorkRecord, Long>) super.getIdentity();
  }

  @Override
  public UniqueKey<DeveloperProjectWorkRecord> getPrimaryKey() {
    return Keys.KEY_DEVELOPER_PROJECT_WORK_PRIMARY;
  }

  @Override
  public List<ForeignKey<DeveloperProjectWorkRecord, ?>> getReferences() {
    return Arrays.asList(Keys.FK_DPWORK_MEMBER, Keys.FK_DPWORK_PROJECT, Keys.FK_DPWORK_APPROVER);
  }

  private transient Member _fkDpworkMember;
  private transient Project _project;
  private transient Member _fkDpworkApprover;

  /**
   * Get the implicit join path to the <code>sion.member</code> table, via the <code>
   * FK_DPWORK_MEMBER</code> key.
   */
  public Member fkDpworkMember() {
    if (_fkDpworkMember == null) _fkDpworkMember = new Member(this, Keys.FK_DPWORK_MEMBER);

    return _fkDpworkMember;
  }

  /** Get the implicit join path to the <code>sion.project</code> table. */
  public Project project() {
    if (_project == null) _project = new Project(this, Keys.FK_DPWORK_PROJECT);

    return _project;
  }

  /**
   * Get the implicit join path to the <code>sion.member</code> table, via the <code>
   * FK_DPWORK_APPROVER</code> key.
   */
  public Member fkDpworkApprover() {
    if (_fkDpworkApprover == null) _fkDpworkApprover = new Member(this, Keys.FK_DPWORK_APPROVER);

    return _fkDpworkApprover;
  }

  @Override
  public DeveloperProjectWork as(String alias) {
    return new DeveloperProjectWork(DSL.name(alias), this);
  }

  @Override
  public DeveloperProjectWork as(Name alias) {
    return new DeveloperProjectWork(alias, this);
  }

  @Override
  public DeveloperProjectWork as(Table<?> alias) {
    return new DeveloperProjectWork(alias.getQualifiedName(), this);
  }

  /** Rename this table */
  @Override
  public DeveloperProjectWork rename(String name) {
    return new DeveloperProjectWork(DSL.name(name), null);
  }

  /** Rename this table */
  @Override
  public DeveloperProjectWork rename(Name name) {
    return new DeveloperProjectWork(name, null);
  }

  /** Rename this table */
  @Override
  public DeveloperProjectWork rename(Table<?> name) {
    return new DeveloperProjectWork(name.getQualifiedName(), null);
  }

  // -------------------------------------------------------------------------
  // Row8 type methods
  // -------------------------------------------------------------------------

  @Override
  public Row8<
          Long,
          String,
          String,
          DeveloperProjectWorkApprovalStatus,
          String,
          LocalDateTime,
          LocalDateTime,
          LocalDateTime>
      fieldsRow() {
    return (Row8) super.fieldsRow();
  }

  /** Convenience mapping calling {@link SelectField#convertFrom(Function)}. */
  public <U> SelectField<U> mapping(
      Function8<
              ? super Long,
              ? super String,
              ? super String,
              ? super DeveloperProjectWorkApprovalStatus,
              ? super String,
              ? super LocalDateTime,
              ? super LocalDateTime,
              ? super LocalDateTime,
              ? extends U>
          from) {
    return convertFrom(Records.mapping(from));
  }

  /** Convenience mapping calling {@link SelectField#convertFrom(Class, Function)}. */
  public <U> SelectField<U> mapping(
      Class<U> toType,
      Function8<
              ? super Long,
              ? super String,
              ? super String,
              ? super DeveloperProjectWorkApprovalStatus,
              ? super String,
              ? super LocalDateTime,
              ? super LocalDateTime,
              ? super LocalDateTime,
              ? extends U>
          from) {
    return convertFrom(toType, Records.mapping(from));
  }
}
