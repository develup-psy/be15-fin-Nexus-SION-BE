/*
 * This file is generated by jOOQ.
 */
package com.example.jooq.generated.tables;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function6;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import com.example.jooq.generated.Keys;
import com.example.jooq.generated.Sion;
import com.example.jooq.generated.tables.records.DeveloperTechStackHistoryRecord;

/** This class is generated by jOOQ. */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class DeveloperTechStackHistory extends TableImpl<DeveloperTechStackHistoryRecord> {

  private static final long serialVersionUID = 1L;

  /** The reference instance of <code>sion.developer_tech_stack_history</code> */
  public static final DeveloperTechStackHistory DEVELOPER_TECH_STACK_HISTORY =
      new DeveloperTechStackHistory();

  /** The class holding records for this type */
  @Override
  public Class<DeveloperTechStackHistoryRecord> getRecordType() {
    return DeveloperTechStackHistoryRecord.class;
  }

  /** The column <code>sion.developer_tech_stack_history.developer_tech_stack_history_id</code>. */
  public final TableField<DeveloperTechStackHistoryRecord, Long> DEVELOPER_TECH_STACK_HISTORY_ID =
      createField(
          DSL.name("developer_tech_stack_history_id"),
          SQLDataType.BIGINT.nullable(false),
          this,
          "");

  /** The column <code>sion.developer_tech_stack_history.added_score</code>. */
  public final TableField<DeveloperTechStackHistoryRecord, Integer> ADDED_SCORE =
      createField(DSL.name("added_score"), SQLDataType.INTEGER.nullable(false), this, "");

  /** The column <code>sion.developer_tech_stack_history.created_at</code>. */
  public final TableField<DeveloperTechStackHistoryRecord, LocalDateTime> CREATED_AT =
      createField(
          DSL.name("created_at"),
          SQLDataType.LOCALDATETIME(0)
              .nullable(false)
              .defaultValue(DSL.field(DSL.raw("current_timestamp()"), SQLDataType.LOCALDATETIME)),
          this,
          "");

  /** The column <code>sion.developer_tech_stack_history.updated_at</code>. */
  public final TableField<DeveloperTechStackHistoryRecord, LocalDateTime> UPDATED_AT =
      createField(
          DSL.name("updated_at"),
          SQLDataType.LOCALDATETIME(0)
              .nullable(false)
              .defaultValue(DSL.field(DSL.raw("current_timestamp()"), SQLDataType.LOCALDATETIME)),
          this,
          "");

  /** The column <code>sion.developer_tech_stack_history.project_code</code>. */
  public final TableField<DeveloperTechStackHistoryRecord, String> PROJECT_CODE =
      createField(DSL.name("project_code"), SQLDataType.VARCHAR(30).nullable(false), this, "");

  /** The column <code>sion.developer_tech_stack_history.developer_tech_stack_id</code>. */
  public final TableField<DeveloperTechStackHistoryRecord, Long> DEVELOPER_TECH_STACK_ID =
      createField(
          DSL.name("developer_tech_stack_id"), SQLDataType.BIGINT.nullable(false), this, "");

  private DeveloperTechStackHistory(Name alias, Table<DeveloperTechStackHistoryRecord> aliased) {
    this(alias, aliased, null);
  }

  private DeveloperTechStackHistory(
      Name alias, Table<DeveloperTechStackHistoryRecord> aliased, Field<?>[] parameters) {
    super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
  }

  /** Create an aliased <code>sion.developer_tech_stack_history</code> table reference */
  public DeveloperTechStackHistory(String alias) {
    this(DSL.name(alias), DEVELOPER_TECH_STACK_HISTORY);
  }

  /** Create an aliased <code>sion.developer_tech_stack_history</code> table reference */
  public DeveloperTechStackHistory(Name alias) {
    this(alias, DEVELOPER_TECH_STACK_HISTORY);
  }

  /** Create a <code>sion.developer_tech_stack_history</code> table reference */
  public DeveloperTechStackHistory() {
    this(DSL.name("developer_tech_stack_history"), null);
  }

  public <O extends Record> DeveloperTechStackHistory(
      Table<O> child, ForeignKey<O, DeveloperTechStackHistoryRecord> key) {
    super(child, key, DEVELOPER_TECH_STACK_HISTORY);
  }

  @Override
  public Schema getSchema() {
    return aliased() ? null : Sion.SION;
  }

  @Override
  public UniqueKey<DeveloperTechStackHistoryRecord> getPrimaryKey() {
    return Keys.KEY_DEVELOPER_TECH_STACK_HISTORY_PRIMARY;
  }

  @Override
  public List<ForeignKey<DeveloperTechStackHistoryRecord, ?>> getReferences() {
    return Arrays.asList(Keys.FK_DTSH_PROJECT, Keys.FK_DTSH_TECH_STACK);
  }

  private transient Project _project;
  private transient DeveloperTechStack _developerTechStack;

  /** Get the implicit join path to the <code>sion.project</code> table. */
  public Project project() {
    if (_project == null) _project = new Project(this, Keys.FK_DTSH_PROJECT);

    return _project;
  }

  /** Get the implicit join path to the <code>sion.developer_tech_stack</code> table. */
  public DeveloperTechStack developerTechStack() {
    if (_developerTechStack == null)
      _developerTechStack = new DeveloperTechStack(this, Keys.FK_DTSH_TECH_STACK);

    return _developerTechStack;
  }

  @Override
  public DeveloperTechStackHistory as(String alias) {
    return new DeveloperTechStackHistory(DSL.name(alias), this);
  }

  @Override
  public DeveloperTechStackHistory as(Name alias) {
    return new DeveloperTechStackHistory(alias, this);
  }

  @Override
  public DeveloperTechStackHistory as(Table<?> alias) {
    return new DeveloperTechStackHistory(alias.getQualifiedName(), this);
  }

  /** Rename this table */
  @Override
  public DeveloperTechStackHistory rename(String name) {
    return new DeveloperTechStackHistory(DSL.name(name), null);
  }

  /** Rename this table */
  @Override
  public DeveloperTechStackHistory rename(Name name) {
    return new DeveloperTechStackHistory(name, null);
  }

  /** Rename this table */
  @Override
  public DeveloperTechStackHistory rename(Table<?> name) {
    return new DeveloperTechStackHistory(name.getQualifiedName(), null);
  }

  // -------------------------------------------------------------------------
  // Row6 type methods
  // -------------------------------------------------------------------------

  @Override
  public Row6<Long, Integer, LocalDateTime, LocalDateTime, String, Long> fieldsRow() {
    return (Row6) super.fieldsRow();
  }

  /** Convenience mapping calling {@link SelectField#convertFrom(Function)}. */
  public <U> SelectField<U> mapping(
      Function6<
              ? super Long,
              ? super Integer,
              ? super LocalDateTime,
              ? super LocalDateTime,
              ? super String,
              ? super Long,
              ? extends U>
          from) {
    return convertFrom(Records.mapping(from));
  }

  /** Convenience mapping calling {@link SelectField#convertFrom(Class, Function)}. */
  public <U> SelectField<U> mapping(
      Class<U> toType,
      Function6<
              ? super Long,
              ? super Integer,
              ? super LocalDateTime,
              ? super LocalDateTime,
              ? super String,
              ? super Long,
              ? extends U>
          from) {
    return convertFrom(toType, Records.mapping(from));
  }
}
