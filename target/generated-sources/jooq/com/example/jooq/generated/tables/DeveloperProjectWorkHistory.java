/*
 * This file is generated by jOOQ.
 */
package com.example.jooq.generated.tables;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function10;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row10;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import com.example.jooq.generated.Keys;
import com.example.jooq.generated.Sion;
import com.example.jooq.generated.enums.DeveloperProjectWorkHistoryComplexity;
import com.example.jooq.generated.enums.DeveloperProjectWorkHistoryFunctionType;
import com.example.jooq.generated.tables.records.DeveloperProjectWorkHistoryRecord;

/** This class is generated by jOOQ. */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class DeveloperProjectWorkHistory extends TableImpl<DeveloperProjectWorkHistoryRecord> {

  private static final long serialVersionUID = 1L;

  /** The reference instance of <code>SION.developer_project_work_history</code> */
  public static final DeveloperProjectWorkHistory DEVELOPER_PROJECT_WORK_HISTORY =
      new DeveloperProjectWorkHistory();

  /** The class holding records for this type */
  @Override
  public Class<DeveloperProjectWorkHistoryRecord> getRecordType() {
    return DeveloperProjectWorkHistoryRecord.class;
  }

  /**
   * The column <code>SION.developer_project_work_history.developer_project_work_history_id</code>.
   */
  public final TableField<DeveloperProjectWorkHistoryRecord, Long>
      DEVELOPER_PROJECT_WORK_HISTORY_ID =
          createField(
              DSL.name("developer_project_work_history_id"),
              SQLDataType.BIGINT.nullable(false).identity(true),
              this,
              "");

  /** The column <code>SION.developer_project_work_history.function_name</code>. */
  public final TableField<DeveloperProjectWorkHistoryRecord, String> FUNCTION_NAME =
      createField(DSL.name("function_name"), SQLDataType.VARCHAR(100).nullable(false), this, "");

  /** The column <code>SION.developer_project_work_history.function_description</code>. */
  public final TableField<DeveloperProjectWorkHistoryRecord, String> FUNCTION_DESCRIPTION =
      createField(DSL.name("function_description"), SQLDataType.CLOB.nullable(false), this, "");

  /** The column <code>SION.developer_project_work_history.function_type</code>. */
  public final TableField<
          DeveloperProjectWorkHistoryRecord, DeveloperProjectWorkHistoryFunctionType>
      FUNCTION_TYPE =
          createField(
              DSL.name("function_type"),
              SQLDataType.VARCHAR(3)
                  .nullable(false)
                  .asEnumDataType(
                      com.example.jooq.generated.enums.DeveloperProjectWorkHistoryFunctionType
                          .class),
              this,
              "");

  /** The column <code>SION.developer_project_work_history.complexity</code>. */
  public final TableField<DeveloperProjectWorkHistoryRecord, DeveloperProjectWorkHistoryComplexity>
      COMPLEXITY =
          createField(
              DSL.name("complexity"),
              SQLDataType.VARCHAR(7)
                  .defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.VARCHAR))
                  .asEnumDataType(
                      com.example.jooq.generated.enums.DeveloperProjectWorkHistoryComplexity.class),
              this,
              "");

  /** The column <code>SION.developer_project_work_history.developer_project_work_id</code>. */
  public final TableField<DeveloperProjectWorkHistoryRecord, Long> DEVELOPER_PROJECT_WORK_ID =
      createField(
          DSL.name("developer_project_work_id"), SQLDataType.BIGINT.nullable(false), this, "");

  /** The column <code>SION.developer_project_work_history.det</code>. */
  public final TableField<DeveloperProjectWorkHistoryRecord, Integer> DET =
      createField(DSL.name("det"), SQLDataType.INTEGER.nullable(false), this, "");

  /** The column <code>SION.developer_project_work_history.ftr</code>. */
  public final TableField<DeveloperProjectWorkHistoryRecord, Integer> FTR =
      createField(DSL.name("ftr"), SQLDataType.INTEGER.nullable(false), this, "");

  /** The column <code>SION.developer_project_work_history.created_at</code>. */
  public final TableField<DeveloperProjectWorkHistoryRecord, LocalDateTime> CREATED_AT =
      createField(
          DSL.name("created_at"),
          SQLDataType.LOCALDATETIME(0)
              .nullable(false)
              .defaultValue(DSL.field(DSL.raw("current_timestamp()"), SQLDataType.LOCALDATETIME)),
          this,
          "");

  /** The column <code>SION.developer_project_work_history.updated_at</code>. */
  public final TableField<DeveloperProjectWorkHistoryRecord, LocalDateTime> UPDATED_AT =
      createField(
          DSL.name("updated_at"),
          SQLDataType.LOCALDATETIME(0)
              .nullable(false)
              .defaultValue(DSL.field(DSL.raw("current_timestamp()"), SQLDataType.LOCALDATETIME)),
          this,
          "");

  private DeveloperProjectWorkHistory(
      Name alias, Table<DeveloperProjectWorkHistoryRecord> aliased) {
    this(alias, aliased, null);
  }

  private DeveloperProjectWorkHistory(
      Name alias, Table<DeveloperProjectWorkHistoryRecord> aliased, Field<?>[] parameters) {
    super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
  }

  /** Create an aliased <code>SION.developer_project_work_history</code> table reference */
  public DeveloperProjectWorkHistory(String alias) {
    this(DSL.name(alias), DEVELOPER_PROJECT_WORK_HISTORY);
  }

  /** Create an aliased <code>SION.developer_project_work_history</code> table reference */
  public DeveloperProjectWorkHistory(Name alias) {
    this(alias, DEVELOPER_PROJECT_WORK_HISTORY);
  }

  /** Create a <code>SION.developer_project_work_history</code> table reference */
  public DeveloperProjectWorkHistory() {
    this(DSL.name("developer_project_work_history"), null);
  }

  public <O extends Record> DeveloperProjectWorkHistory(
      Table<O> child, ForeignKey<O, DeveloperProjectWorkHistoryRecord> key) {
    super(child, key, DEVELOPER_PROJECT_WORK_HISTORY);
  }

  @Override
  public Schema getSchema() {
    return aliased() ? null : Sion.SION;
  }

  @Override
  public Identity<DeveloperProjectWorkHistoryRecord, Long> getIdentity() {
    return (Identity<DeveloperProjectWorkHistoryRecord, Long>) super.getIdentity();
  }

  @Override
  public UniqueKey<DeveloperProjectWorkHistoryRecord> getPrimaryKey() {
    return Keys.KEY_DEVELOPER_PROJECT_WORK_HISTORY_PRIMARY;
  }

  @Override
  public List<ForeignKey<DeveloperProjectWorkHistoryRecord, ?>> getReferences() {
    return Arrays.asList(Keys.FK_DPWH_DPWORK);
  }

  private transient DeveloperProjectWork _developerProjectWork;

  /** Get the implicit join path to the <code>SION.developer_project_work</code> table. */
  public DeveloperProjectWork developerProjectWork() {
    if (_developerProjectWork == null)
      _developerProjectWork = new DeveloperProjectWork(this, Keys.FK_DPWH_DPWORK);

    return _developerProjectWork;
  }

  @Override
  public DeveloperProjectWorkHistory as(String alias) {
    return new DeveloperProjectWorkHistory(DSL.name(alias), this);
  }

  @Override
  public DeveloperProjectWorkHistory as(Name alias) {
    return new DeveloperProjectWorkHistory(alias, this);
  }

  @Override
  public DeveloperProjectWorkHistory as(Table<?> alias) {
    return new DeveloperProjectWorkHistory(alias.getQualifiedName(), this);
  }

  /** Rename this table */
  @Override
  public DeveloperProjectWorkHistory rename(String name) {
    return new DeveloperProjectWorkHistory(DSL.name(name), null);
  }

  /** Rename this table */
  @Override
  public DeveloperProjectWorkHistory rename(Name name) {
    return new DeveloperProjectWorkHistory(name, null);
  }

  /** Rename this table */
  @Override
  public DeveloperProjectWorkHistory rename(Table<?> name) {
    return new DeveloperProjectWorkHistory(name.getQualifiedName(), null);
  }

  // -------------------------------------------------------------------------
  // Row10 type methods
  // -------------------------------------------------------------------------

  @Override
  public Row10<
          Long,
          String,
          String,
          DeveloperProjectWorkHistoryFunctionType,
          DeveloperProjectWorkHistoryComplexity,
          Long,
          Integer,
          Integer,
          LocalDateTime,
          LocalDateTime>
      fieldsRow() {
    return (Row10) super.fieldsRow();
  }

  /** Convenience mapping calling {@link SelectField#convertFrom(Function)}. */
  public <U> SelectField<U> mapping(
      Function10<
              ? super Long,
              ? super String,
              ? super String,
              ? super DeveloperProjectWorkHistoryFunctionType,
              ? super DeveloperProjectWorkHistoryComplexity,
              ? super Long,
              ? super Integer,
              ? super Integer,
              ? super LocalDateTime,
              ? super LocalDateTime,
              ? extends U>
          from) {
    return convertFrom(Records.mapping(from));
  }

  /** Convenience mapping calling {@link SelectField#convertFrom(Class, Function)}. */
  public <U> SelectField<U> mapping(
      Class<U> toType,
      Function10<
              ? super Long,
              ? super String,
              ? super String,
              ? super DeveloperProjectWorkHistoryFunctionType,
              ? super DeveloperProjectWorkHistoryComplexity,
              ? super Long,
              ? super Integer,
              ? super Integer,
              ? super LocalDateTime,
              ? super LocalDateTime,
              ? extends U>
          from) {
    return convertFrom(toType, Records.mapping(from));
  }
}
