/*
 * This file is generated by jOOQ.
 */
package com.example.jooq.generated.tables;

import java.time.LocalDateTime;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function3;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import com.example.jooq.generated.Keys;
import com.example.jooq.generated.Sion;
import com.example.jooq.generated.tables.records.DomainRecord;

/** This class is generated by jOOQ. */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class Domain extends TableImpl<DomainRecord> {

  private static final long serialVersionUID = 1L;

  /** The reference instance of <code>SION.domain</code> */
  public static final Domain DOMAIN = new Domain();

  /** The class holding records for this type */
  @Override
  public Class<DomainRecord> getRecordType() {
    return DomainRecord.class;
  }

  /** The column <code>SION.domain.name</code>. */
  public final TableField<DomainRecord, String> NAME =
      createField(DSL.name("name"), SQLDataType.VARCHAR(30).nullable(false), this, "");

  /** The column <code>SION.domain.created_at</code>. */
  public final TableField<DomainRecord, LocalDateTime> CREATED_AT =
      createField(
          DSL.name("created_at"),
          SQLDataType.LOCALDATETIME(0)
              .nullable(false)
              .defaultValue(DSL.field(DSL.raw("current_timestamp()"), SQLDataType.LOCALDATETIME)),
          this,
          "");

  /** The column <code>SION.domain.updated_at</code>. */
  public final TableField<DomainRecord, LocalDateTime> UPDATED_AT =
      createField(
          DSL.name("updated_at"),
          SQLDataType.LOCALDATETIME(0)
              .nullable(false)
              .defaultValue(DSL.field(DSL.raw("current_timestamp()"), SQLDataType.LOCALDATETIME)),
          this,
          "");

  private Domain(Name alias, Table<DomainRecord> aliased) {
    this(alias, aliased, null);
  }

  private Domain(Name alias, Table<DomainRecord> aliased, Field<?>[] parameters) {
    super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
  }

  /** Create an aliased <code>SION.domain</code> table reference */
  public Domain(String alias) {
    this(DSL.name(alias), DOMAIN);
  }

  /** Create an aliased <code>SION.domain</code> table reference */
  public Domain(Name alias) {
    this(alias, DOMAIN);
  }

  /** Create a <code>SION.domain</code> table reference */
  public Domain() {
    this(DSL.name("domain"), null);
  }

  public <O extends Record> Domain(Table<O> child, ForeignKey<O, DomainRecord> key) {
    super(child, key, DOMAIN);
  }

  @Override
  public Schema getSchema() {
    return aliased() ? null : Sion.SION;
  }

  @Override
  public UniqueKey<DomainRecord> getPrimaryKey() {
    return Keys.KEY_DOMAIN_PRIMARY;
  }

  @Override
  public Domain as(String alias) {
    return new Domain(DSL.name(alias), this);
  }

  @Override
  public Domain as(Name alias) {
    return new Domain(alias, this);
  }

  @Override
  public Domain as(Table<?> alias) {
    return new Domain(alias.getQualifiedName(), this);
  }

  /** Rename this table */
  @Override
  public Domain rename(String name) {
    return new Domain(DSL.name(name), null);
  }

  /** Rename this table */
  @Override
  public Domain rename(Name name) {
    return new Domain(name, null);
  }

  /** Rename this table */
  @Override
  public Domain rename(Table<?> name) {
    return new Domain(name.getQualifiedName(), null);
  }

  // -------------------------------------------------------------------------
  // Row3 type methods
  // -------------------------------------------------------------------------

  @Override
  public Row3<String, LocalDateTime, LocalDateTime> fieldsRow() {
    return (Row3) super.fieldsRow();
  }

  /** Convenience mapping calling {@link SelectField#convertFrom(Function)}. */
  public <U> SelectField<U> mapping(
      Function3<? super String, ? super LocalDateTime, ? super LocalDateTime, ? extends U> from) {
    return convertFrom(Records.mapping(from));
  }

  /** Convenience mapping calling {@link SelectField#convertFrom(Class, Function)}. */
  public <U> SelectField<U> mapping(
      Class<U> toType,
      Function3<? super String, ? super LocalDateTime, ? super LocalDateTime, ? extends U> from) {
    return convertFrom(toType, Records.mapping(from));
  }
}
