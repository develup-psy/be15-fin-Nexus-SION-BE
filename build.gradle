plugins {
    id 'java'
    id 'org.springframework.boot' version '3.5.0'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'nu.studer.jooq' version '8.2'
    id 'com.diffplug.spotless' version '7.0.4'
    id 'jacoco'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

jacoco {
    toolVersion = "0.8.10" // 최신 버전 확인 후 반영
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport // 테스트 후 커버리지 리포트 생성
}

jacocoTestReport {
    dependsOn test // 테스트가 선행되어야 리포트 생성 가능
    reports {
        html.required = true
        xml.required = true
        csv.required = false
    }
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

jacoco {
    toolVersion = "0.8.10" // 최신 버전 사용
}

jacocoTestReport {
    dependsOn test // 테스트 실행 후 리포트 생성

    reports {
        html.required.set(true)      // HTML 리포트
        xml.required.set(true)       // XML 리포트 (CI용)
        csv.required.set(false)
        html.outputLocation = layout.buildDirectory.dir("jacocoHtml")
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.6'
    implementation 'org.springframework.boot:spring-boot-starter-jooq'
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'com.h2database:h2'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    implementation 'org.modelmapper:modelmapper:3.2.1'
    implementation 'com.diffplug.spotless:spotless-plugin-gradle:7.0.4'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'

    //jwt
    implementation 'io.jsonwebtoken:jjwt-api:0.12.6'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.12.6'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.12.6'

    jooqGenerator 'org.mariadb.jdbc:mariadb-java-client'


    //aws
    implementation 'io.awspring.cloud:spring-cloud-aws-starter:3.1.1'
    implementation 'com.amazonaws:aws-java-sdk-s3:1.12.767'

    implementation 'software.amazon.awssdk:s3:2.21.5'

    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'

    //메트릭 수집
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'io.micrometer:micrometer-registry-prometheus'

    //로그 수집
    implementation 'net.logstash.logback:logstash-logback-encoder:7.4'


}

sourceSets {
    main {
        java {
            srcDir 'target/generated-sources/jooq'
        }
    }
}

spotless {
    java {
        googleJavaFormat()
        // 아래 순서로 import문 정렬
        importOrder('java', 'javax', 'jakarta', 'org', 'com')
        // 사용하지 않는 import 제거
        removeUnusedImports()
        // 각 라인 끝에 있는 공백을 제거
        trimTrailingWhitespace()
        // 파일 끝에 새로운 라인 추가
        endWithNewline()
        target '**/*.java' // 포맷팅 대상
    }
}

tasks.named('test') {
    useJUnitPlatform()
}

def env = new Properties()
file(".env").withInputStream { stream -> env.load(stream) }
def dbHost = env.getProperty("DB_HOST")
def dbPort = env.getProperty("DB_PORT")
def dbName = env.getProperty("DB_NAME")
def dbUrl = "jdbc:mariadb://${dbHost}:${dbPort}/${dbName}"

jooq {
    version = '3.18.6' // jooq 라이브러리 버전
    configurations {
        main {
            generationTool {
                jdbc {
                    driver = 'org.mariadb.jdbc.Driver'
                    url = dbUrl
                    user = env.getProperty('DB_USERNAME')
                    password = env.getProperty('DB_PASSWORD')
                }
                generator {
                    name = 'org.jooq.codegen.DefaultGenerator'
                    strategy.name = 'org.jooq.codegen.DefaultGeneratorStrategy'
                    database {
                        name = 'org.jooq.meta.mariadb.MariaDBDatabase'
                        inputSchema = dbName // MariaDB의 DB명
                    }
                    generate {
                        daos = true
                        pojos = true
                        javaTimeTypes = true
                    }
                    target {
                        packageName = 'com.example.jooq.generated'
                        directory = 'target/generated-sources/jooq'
                    }
                }
            }
        }
    }
}

tasks.named('generateJooq') {
    onlyIf {
        gradle.startParameter.taskNames.contains('generateJooq')
    }
}